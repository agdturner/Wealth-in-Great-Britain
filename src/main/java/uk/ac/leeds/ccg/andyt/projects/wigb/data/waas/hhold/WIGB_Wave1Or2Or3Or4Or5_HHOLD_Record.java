/**
 * Source code generated by uk.ac.leeds.ccg.andyt.projects.wigb.process.WIGB_JavaCodeGenerator
 */
package uk.ac.leeds.ccg.andyt.projects.wigb.data.waas.hhold;
import java.io.Serializable;
public class WIGB_Wave1Or2Or3Or4Or5_HHOLD_Record implements Serializable {
protected String[] s;
protected double ACCOM;
protected double ACCOTH;
protected double ALLENDW;
protected double ALLGD;
protected Integer CASEW1;
protected double DVEQRELVAL;
protected double DVGCOLLV;
protected double DVHORP;
protected double DVHSIZE;
protected double DVHVALUE;
protected double DVPRIRNT;
protected double DVPROPERTY;
protected double DVTOTOTHVEHVAL;
protected double DVTOTPERNPVAL;
protected double DVTOTVEHVAL;
protected double EINTRAT;
protected double EINTRAT_I;
protected double EINTRAT_IFLAG;
protected double EOTHREG;
protected double EOTHRVA;
protected double EOTHRVB;
protected double EPRPER;
protected double EPRVAL;
protected double EPRVPAY;
protected double EQVAL;
protected double EQVALB;
protected double EQVAL_I;
protected double EQVAL_IFLAG;
protected double EQYES;
protected double ERECTAX;
protected double ERVPRP;
protected double ERVPRP_I;
protected double ERVPRP_IFLAG;
protected double ERVRENT;
protected double ERVSUM;
protected double ERVSUMB;
protected double ERVTAX;
protected double FLTTYP;
protected double FURN;
protected double GCOLLEC;
protected double GCOLLEC_I;
protected double GCOLLEC_IFLAG;
protected double GCOLLV;
protected double GCOLLVB;
protected double GCOLLV_I;
protected double GCOLLV_IFLAG;
protected double GCONTVB;
protected double GCONTVB_I;
protected double GCONTVB_IFLAG;
protected double GOR;
protected double HAGEB;
protected double HAGEYR;
protected double HBEDRM;
protected double HBFROM;
protected double HBUYSE;
protected double HBUYYR;
protected double HFINWNT_SUM;
protected double HFINW_SUM;
protected double HHOLDTYPE;
protected double HHOSCH;
protected double HHOWN;
protected double HMORTG;
protected double HOUSGDST_SUM;
protected double HOUT;
protected double HPHYSW;
protected double HPRICE;
protected double HPRICEB;
protected double HPROPW;
protected double HRPDVAGE9;
protected double HRPDVILO3A;
protected double HRPDVMRDF;
protected double HRPEDATTN1;
protected double HRPEDATTN2;
protected double HRPEDATTN3;
protected double HRPEDLEVEL;
protected double HRPNSSEC3;
protected double HRPSEX;
protected double HRTBEV;
protected double HSETYPE;
protected double HSHARE;
protected double HSHAREP;
protected double HSHAREP_I;
protected double HSHAREP_IFLAG;
protected double HSHARE_I;
protected double HSHARE_IFLAG;
protected double HVALB;
protected double HVALUE;
protected double HVALUE_I;
protected double HVALUE_IFLAG;
protected double LLORD;
protected double MALL2;
protected double MALL2_I;
protected double MALL2_IFLAG;
protected double MALL3;
protected double MALL3_I;
protected double MALL3_IFLAG;
protected double MALLTY2;
protected double MALLTY2_I;
protected double MALLTY2_IFLAG;
protected double MALLTY3;
protected double MARRS2;
protected double MARRS3;
protected double MENDNUM2;
protected double MENDNUM2_I;
protected double MENDNUM2_IFLAG;
protected double MENDNUM3;
protected double MENDV11;
protected double MENDV2;
protected double MENDV2_I;
protected double MENDV2_IFLAG;
protected double MENDV3;
protected double MENDV3_I;
protected double MENDV3_IFLAG;
protected double MENDV4;
protected double MENDV4_I;
protected double MENDV4_IFLAG;
protected double MENDV5;
protected double MENDV6;
protected double MENDV6_I;
protected double MENDV6_IFLAG;
protected double MENDV7;
protected double MENDV8;
protected double MENDVB11;
protected double MENDVB2;
protected double MENDVB3;
protected double MENDVB4;
protected double MENDVB6;
protected double MENDVB7;
protected double MENDW2_I;
protected double MENDW2_IFLAG;
protected double MENDW3_I;
protected double MENDW3_IFLAG;
protected double MENDX2;
protected double MENDX3;
protected double MENDY11;
protected double MENDY2;
protected double MENDY3;
protected double MENDY4;
protected double MENDY6;
protected double MENDY7;
protected double MHOWPY2;
protected double MHOWPY3;
protected double MINC1;
protected double MINC11;
protected double MINC2;
protected double MINC3;
protected double MINC4;
protected double MINC5;
protected double MINC6;
protected double MJNAME01;
protected double MJNAME02;
protected double MJNAME03;
protected double MJNAME04;
protected double MJNAME18;
protected double MJNAME19;
protected double MJNAME20;
protected double MJNAME35;
protected double MJNAME36;
protected double MNAME2;
protected double MNAME3;
protected double MNEG2;
protected double MNEG2_I;
protected double MNEG2_IFLAG;
protected double MNEG3;
protected double MNEGB2;
protected double MNEGB3;
protected double MNUMB;
protected double MONAME2;
protected double MONAME3;
protected double MONTH;
protected double MPAYB2;
protected double MPAYB3;
protected double MPAYM2;
protected double MPAYM3;
protected double MPP2;
protected double MPP3;
protected double MREAS01;
protected double MREAS02;
protected double MREAS03;
protected double MREAS04;
protected double MREAS05;
protected double MREAS06;
protected double MREAS07;
protected double MREAS12;
protected double MREAS13;
protected double MREAS23;
protected double MTYPE2;
protected double MTYPE2_I;
protected double MTYPE2_IFLAG;
protected double MTYPE3;
protected double MTYPE3_I;
protected double MTYPE3_IFLAG;
protected double MVAL2;
protected double MVAL2_I;
protected double MVAL2_IFLAG;
protected double MVAL3;
protected double MVAL3_I;
protected double MVAL3_IFLAG;
protected double MVALB2;
protected double MVALB3;
protected double MYLFT2;
protected double MYLFT3;
protected double NUMADULT;
protected double NUMCH18;
protected double NUMCHILD;
protected double NUMCIVPTR;
protected double NUMCPART;
protected double NUMHHLDR;
protected double NUMMPART;
protected double OFINAL;
protected double TEN1;
protected double TEN1_I;
protected double TEN1_IFLAG;
protected double TIED;
protected double TOTMNEG;
protected double TOTMORT;
protected double TOTMVAL;
protected double TOTWLTH;
protected double VCARN;
protected double VCARN_I;
protected double VCARN_IFLAG;
protected double VOTYP1;
protected double VOTYP1_I;
protected double VOTYP2;
protected double VOTYP2_I;
protected double VOTYP3;
protected double VOTYP3_I;
protected double VOTYP4;
protected double VOTYP4_I;
protected double VOTYP5_I;
protected double VOVAL;
protected double VOVAL_I;
protected double VOVAL_IFLAG;
protected double VOVLB;
protected double VPERS;
protected double VPERV;
protected double VPERV_I;
protected double VPERV_IFLAG;
protected double VTYPE2;
protected double VTYPE2_I;
protected double VTYPE_IFLAG;
protected double YEAR;
protected final void initACCOM(String s) {
if (!s.trim().isEmpty()) {
ACCOM = new Double(s);
} else {
ACCOM = Double.NaN;
}
}

protected final void initACCOTH(String s) {
if (!s.trim().isEmpty()) {
ACCOTH = new Double(s);
} else {
ACCOTH = Double.NaN;
}
}

protected final void initALLENDW(String s) {
if (!s.trim().isEmpty()) {
ALLENDW = new Double(s);
} else {
ALLENDW = Double.NaN;
}
}

protected final void initALLGD(String s) {
if (!s.trim().isEmpty()) {
ALLGD = new Double(s);
} else {
ALLGD = Double.NaN;
}
}

protected final void initCASEW1(String s) {
if (!s.trim().isEmpty()) {
CASEW1 = new Integer(s);
}
}

protected final void initDVEQRELVAL(String s) {
if (!s.trim().isEmpty()) {
DVEQRELVAL = new Double(s);
} else {
DVEQRELVAL = Double.NaN;
}
}

protected final void initDVGCOLLV(String s) {
if (!s.trim().isEmpty()) {
DVGCOLLV = new Double(s);
} else {
DVGCOLLV = Double.NaN;
}
}

protected final void initDVHORP(String s) {
if (!s.trim().isEmpty()) {
DVHORP = new Double(s);
} else {
DVHORP = Double.NaN;
}
}

protected final void initDVHSIZE(String s) {
if (!s.trim().isEmpty()) {
DVHSIZE = new Double(s);
} else {
DVHSIZE = Double.NaN;
}
}

protected final void initDVHVALUE(String s) {
if (!s.trim().isEmpty()) {
DVHVALUE = new Double(s);
} else {
DVHVALUE = Double.NaN;
}
}

protected final void initDVPRIRNT(String s) {
if (!s.trim().isEmpty()) {
DVPRIRNT = new Double(s);
} else {
DVPRIRNT = Double.NaN;
}
}

protected final void initDVPROPERTY(String s) {
if (!s.trim().isEmpty()) {
DVPROPERTY = new Double(s);
} else {
DVPROPERTY = Double.NaN;
}
}

protected final void initDVTOTOTHVEHVAL(String s) {
if (!s.trim().isEmpty()) {
DVTOTOTHVEHVAL = new Double(s);
} else {
DVTOTOTHVEHVAL = Double.NaN;
}
}

protected final void initDVTOTPERNPVAL(String s) {
if (!s.trim().isEmpty()) {
DVTOTPERNPVAL = new Double(s);
} else {
DVTOTPERNPVAL = Double.NaN;
}
}

protected final void initDVTOTVEHVAL(String s) {
if (!s.trim().isEmpty()) {
DVTOTVEHVAL = new Double(s);
} else {
DVTOTVEHVAL = Double.NaN;
}
}

protected final void initEINTRAT(String s) {
if (!s.trim().isEmpty()) {
EINTRAT = new Double(s);
} else {
EINTRAT = Double.NaN;
}
}

protected final void initEINTRAT_I(String s) {
if (!s.trim().isEmpty()) {
EINTRAT_I = new Double(s);
} else {
EINTRAT_I = Double.NaN;
}
}

protected final void initEINTRAT_IFLAG(String s) {
if (!s.trim().isEmpty()) {
EINTRAT_IFLAG = new Double(s);
} else {
EINTRAT_IFLAG = Double.NaN;
}
}

protected final void initEOTHREG(String s) {
if (!s.trim().isEmpty()) {
EOTHREG = new Double(s);
} else {
EOTHREG = Double.NaN;
}
}

protected final void initEOTHRVA(String s) {
if (!s.trim().isEmpty()) {
EOTHRVA = new Double(s);
} else {
EOTHRVA = Double.NaN;
}
}

protected final void initEOTHRVB(String s) {
if (!s.trim().isEmpty()) {
EOTHRVB = new Double(s);
} else {
EOTHRVB = Double.NaN;
}
}

protected final void initEPRPER(String s) {
if (!s.trim().isEmpty()) {
EPRPER = new Double(s);
} else {
EPRPER = Double.NaN;
}
}

protected final void initEPRVAL(String s) {
if (!s.trim().isEmpty()) {
EPRVAL = new Double(s);
} else {
EPRVAL = Double.NaN;
}
}

protected final void initEPRVPAY(String s) {
if (!s.trim().isEmpty()) {
EPRVPAY = new Double(s);
} else {
EPRVPAY = Double.NaN;
}
}

protected final void initEQVAL(String s) {
if (!s.trim().isEmpty()) {
EQVAL = new Double(s);
} else {
EQVAL = Double.NaN;
}
}

protected final void initEQVALB(String s) {
if (!s.trim().isEmpty()) {
EQVALB = new Double(s);
} else {
EQVALB = Double.NaN;
}
}

protected final void initEQVAL_I(String s) {
if (!s.trim().isEmpty()) {
EQVAL_I = new Double(s);
} else {
EQVAL_I = Double.NaN;
}
}

protected final void initEQVAL_IFLAG(String s) {
if (!s.trim().isEmpty()) {
EQVAL_IFLAG = new Double(s);
} else {
EQVAL_IFLAG = Double.NaN;
}
}

protected final void initEQYES(String s) {
if (!s.trim().isEmpty()) {
EQYES = new Double(s);
} else {
EQYES = Double.NaN;
}
}

protected final void initERECTAX(String s) {
if (!s.trim().isEmpty()) {
ERECTAX = new Double(s);
} else {
ERECTAX = Double.NaN;
}
}

protected final void initERVPRP(String s) {
if (!s.trim().isEmpty()) {
ERVPRP = new Double(s);
} else {
ERVPRP = Double.NaN;
}
}

protected final void initERVPRP_I(String s) {
if (!s.trim().isEmpty()) {
ERVPRP_I = new Double(s);
} else {
ERVPRP_I = Double.NaN;
}
}

protected final void initERVPRP_IFLAG(String s) {
if (!s.trim().isEmpty()) {
ERVPRP_IFLAG = new Double(s);
} else {
ERVPRP_IFLAG = Double.NaN;
}
}

protected final void initERVRENT(String s) {
if (!s.trim().isEmpty()) {
ERVRENT = new Double(s);
} else {
ERVRENT = Double.NaN;
}
}

protected final void initERVSUM(String s) {
if (!s.trim().isEmpty()) {
ERVSUM = new Double(s);
} else {
ERVSUM = Double.NaN;
}
}

protected final void initERVSUMB(String s) {
if (!s.trim().isEmpty()) {
ERVSUMB = new Double(s);
} else {
ERVSUMB = Double.NaN;
}
}

protected final void initERVTAX(String s) {
if (!s.trim().isEmpty()) {
ERVTAX = new Double(s);
} else {
ERVTAX = Double.NaN;
}
}

protected final void initFLTTYP(String s) {
if (!s.trim().isEmpty()) {
FLTTYP = new Double(s);
} else {
FLTTYP = Double.NaN;
}
}

protected final void initFURN(String s) {
if (!s.trim().isEmpty()) {
FURN = new Double(s);
} else {
FURN = Double.NaN;
}
}

protected final void initGCOLLEC(String s) {
if (!s.trim().isEmpty()) {
GCOLLEC = new Double(s);
} else {
GCOLLEC = Double.NaN;
}
}

protected final void initGCOLLEC_I(String s) {
if (!s.trim().isEmpty()) {
GCOLLEC_I = new Double(s);
} else {
GCOLLEC_I = Double.NaN;
}
}

protected final void initGCOLLEC_IFLAG(String s) {
if (!s.trim().isEmpty()) {
GCOLLEC_IFLAG = new Double(s);
} else {
GCOLLEC_IFLAG = Double.NaN;
}
}

protected final void initGCOLLV(String s) {
if (!s.trim().isEmpty()) {
GCOLLV = new Double(s);
} else {
GCOLLV = Double.NaN;
}
}

protected final void initGCOLLVB(String s) {
if (!s.trim().isEmpty()) {
GCOLLVB = new Double(s);
} else {
GCOLLVB = Double.NaN;
}
}

protected final void initGCOLLV_I(String s) {
if (!s.trim().isEmpty()) {
GCOLLV_I = new Double(s);
} else {
GCOLLV_I = Double.NaN;
}
}

protected final void initGCOLLV_IFLAG(String s) {
if (!s.trim().isEmpty()) {
GCOLLV_IFLAG = new Double(s);
} else {
GCOLLV_IFLAG = Double.NaN;
}
}

protected final void initGCONTVB(String s) {
if (!s.trim().isEmpty()) {
GCONTVB = new Double(s);
} else {
GCONTVB = Double.NaN;
}
}

protected final void initGCONTVB_I(String s) {
if (!s.trim().isEmpty()) {
GCONTVB_I = new Double(s);
} else {
GCONTVB_I = Double.NaN;
}
}

protected final void initGCONTVB_IFLAG(String s) {
if (!s.trim().isEmpty()) {
GCONTVB_IFLAG = new Double(s);
} else {
GCONTVB_IFLAG = Double.NaN;
}
}

protected final void initGOR(String s) {
if (!s.trim().isEmpty()) {
GOR = new Double(s);
} else {
GOR = Double.NaN;
}
}

protected final void initHAGEB(String s) {
if (!s.trim().isEmpty()) {
HAGEB = new Double(s);
} else {
HAGEB = Double.NaN;
}
}

protected final void initHAGEYR(String s) {
if (!s.trim().isEmpty()) {
HAGEYR = new Double(s);
} else {
HAGEYR = Double.NaN;
}
}

protected final void initHBEDRM(String s) {
if (!s.trim().isEmpty()) {
HBEDRM = new Double(s);
} else {
HBEDRM = Double.NaN;
}
}

protected final void initHBFROM(String s) {
if (!s.trim().isEmpty()) {
HBFROM = new Double(s);
} else {
HBFROM = Double.NaN;
}
}

protected final void initHBUYSE(String s) {
if (!s.trim().isEmpty()) {
HBUYSE = new Double(s);
} else {
HBUYSE = Double.NaN;
}
}

protected final void initHBUYYR(String s) {
if (!s.trim().isEmpty()) {
HBUYYR = new Double(s);
} else {
HBUYYR = Double.NaN;
}
}

protected final void initHFINWNT_SUM(String s) {
if (!s.trim().isEmpty()) {
HFINWNT_SUM = new Double(s);
} else {
HFINWNT_SUM = Double.NaN;
}
}

protected final void initHFINW_SUM(String s) {
if (!s.trim().isEmpty()) {
HFINW_SUM = new Double(s);
} else {
HFINW_SUM = Double.NaN;
}
}

protected final void initHHOLDTYPE(String s) {
if (!s.trim().isEmpty()) {
HHOLDTYPE = new Double(s);
} else {
HHOLDTYPE = Double.NaN;
}
}

protected final void initHHOSCH(String s) {
if (!s.trim().isEmpty()) {
HHOSCH = new Double(s);
} else {
HHOSCH = Double.NaN;
}
}

protected final void initHHOWN(String s) {
if (!s.trim().isEmpty()) {
HHOWN = new Double(s);
} else {
HHOWN = Double.NaN;
}
}

protected final void initHMORTG(String s) {
if (!s.trim().isEmpty()) {
HMORTG = new Double(s);
} else {
HMORTG = Double.NaN;
}
}

protected final void initHOUSGDST_SUM(String s) {
if (!s.trim().isEmpty()) {
HOUSGDST_SUM = new Double(s);
} else {
HOUSGDST_SUM = Double.NaN;
}
}

protected final void initHOUT(String s) {
if (!s.trim().isEmpty()) {
HOUT = new Double(s);
} else {
HOUT = Double.NaN;
}
}

protected final void initHPHYSW(String s) {
if (!s.trim().isEmpty()) {
HPHYSW = new Double(s);
} else {
HPHYSW = Double.NaN;
}
}

protected final void initHPRICE(String s) {
if (!s.trim().isEmpty()) {
HPRICE = new Double(s);
} else {
HPRICE = Double.NaN;
}
}

protected final void initHPRICEB(String s) {
if (!s.trim().isEmpty()) {
HPRICEB = new Double(s);
} else {
HPRICEB = Double.NaN;
}
}

protected final void initHPROPW(String s) {
if (!s.trim().isEmpty()) {
HPROPW = new Double(s);
} else {
HPROPW = Double.NaN;
}
}

protected final void initHRPDVAGE9(String s) {
if (!s.trim().isEmpty()) {
HRPDVAGE9 = new Double(s);
} else {
HRPDVAGE9 = Double.NaN;
}
}

protected final void initHRPDVILO3A(String s) {
if (!s.trim().isEmpty()) {
HRPDVILO3A = new Double(s);
} else {
HRPDVILO3A = Double.NaN;
}
}

protected final void initHRPDVMRDF(String s) {
if (!s.trim().isEmpty()) {
HRPDVMRDF = new Double(s);
} else {
HRPDVMRDF = Double.NaN;
}
}

protected final void initHRPEDATTN1(String s) {
if (!s.trim().isEmpty()) {
HRPEDATTN1 = new Double(s);
} else {
HRPEDATTN1 = Double.NaN;
}
}

protected final void initHRPEDATTN2(String s) {
if (!s.trim().isEmpty()) {
HRPEDATTN2 = new Double(s);
} else {
HRPEDATTN2 = Double.NaN;
}
}

protected final void initHRPEDATTN3(String s) {
if (!s.trim().isEmpty()) {
HRPEDATTN3 = new Double(s);
} else {
HRPEDATTN3 = Double.NaN;
}
}

protected final void initHRPEDLEVEL(String s) {
if (!s.trim().isEmpty()) {
HRPEDLEVEL = new Double(s);
} else {
HRPEDLEVEL = Double.NaN;
}
}

protected final void initHRPNSSEC3(String s) {
if (!s.trim().isEmpty()) {
HRPNSSEC3 = new Double(s);
} else {
HRPNSSEC3 = Double.NaN;
}
}

protected final void initHRPSEX(String s) {
if (!s.trim().isEmpty()) {
HRPSEX = new Double(s);
} else {
HRPSEX = Double.NaN;
}
}

protected final void initHRTBEV(String s) {
if (!s.trim().isEmpty()) {
HRTBEV = new Double(s);
} else {
HRTBEV = Double.NaN;
}
}

protected final void initHSETYPE(String s) {
if (!s.trim().isEmpty()) {
HSETYPE = new Double(s);
} else {
HSETYPE = Double.NaN;
}
}

protected final void initHSHARE(String s) {
if (!s.trim().isEmpty()) {
HSHARE = new Double(s);
} else {
HSHARE = Double.NaN;
}
}

protected final void initHSHAREP(String s) {
if (!s.trim().isEmpty()) {
HSHAREP = new Double(s);
} else {
HSHAREP = Double.NaN;
}
}

protected final void initHSHAREP_I(String s) {
if (!s.trim().isEmpty()) {
HSHAREP_I = new Double(s);
} else {
HSHAREP_I = Double.NaN;
}
}

protected final void initHSHAREP_IFLAG(String s) {
if (!s.trim().isEmpty()) {
HSHAREP_IFLAG = new Double(s);
} else {
HSHAREP_IFLAG = Double.NaN;
}
}

protected final void initHSHARE_I(String s) {
if (!s.trim().isEmpty()) {
HSHARE_I = new Double(s);
} else {
HSHARE_I = Double.NaN;
}
}

protected final void initHSHARE_IFLAG(String s) {
if (!s.trim().isEmpty()) {
HSHARE_IFLAG = new Double(s);
} else {
HSHARE_IFLAG = Double.NaN;
}
}

protected final void initHVALB(String s) {
if (!s.trim().isEmpty()) {
HVALB = new Double(s);
} else {
HVALB = Double.NaN;
}
}

protected final void initHVALUE(String s) {
if (!s.trim().isEmpty()) {
HVALUE = new Double(s);
} else {
HVALUE = Double.NaN;
}
}

protected final void initHVALUE_I(String s) {
if (!s.trim().isEmpty()) {
HVALUE_I = new Double(s);
} else {
HVALUE_I = Double.NaN;
}
}

protected final void initHVALUE_IFLAG(String s) {
if (!s.trim().isEmpty()) {
HVALUE_IFLAG = new Double(s);
} else {
HVALUE_IFLAG = Double.NaN;
}
}

protected final void initLLORD(String s) {
if (!s.trim().isEmpty()) {
LLORD = new Double(s);
} else {
LLORD = Double.NaN;
}
}

protected final void initMALL2(String s) {
if (!s.trim().isEmpty()) {
MALL2 = new Double(s);
} else {
MALL2 = Double.NaN;
}
}

protected final void initMALL2_I(String s) {
if (!s.trim().isEmpty()) {
MALL2_I = new Double(s);
} else {
MALL2_I = Double.NaN;
}
}

protected final void initMALL2_IFLAG(String s) {
if (!s.trim().isEmpty()) {
MALL2_IFLAG = new Double(s);
} else {
MALL2_IFLAG = Double.NaN;
}
}

protected final void initMALL3(String s) {
if (!s.trim().isEmpty()) {
MALL3 = new Double(s);
} else {
MALL3 = Double.NaN;
}
}

protected final void initMALL3_I(String s) {
if (!s.trim().isEmpty()) {
MALL3_I = new Double(s);
} else {
MALL3_I = Double.NaN;
}
}

protected final void initMALL3_IFLAG(String s) {
if (!s.trim().isEmpty()) {
MALL3_IFLAG = new Double(s);
} else {
MALL3_IFLAG = Double.NaN;
}
}

protected final void initMALLTY2(String s) {
if (!s.trim().isEmpty()) {
MALLTY2 = new Double(s);
} else {
MALLTY2 = Double.NaN;
}
}

protected final void initMALLTY2_I(String s) {
if (!s.trim().isEmpty()) {
MALLTY2_I = new Double(s);
} else {
MALLTY2_I = Double.NaN;
}
}

protected final void initMALLTY2_IFLAG(String s) {
if (!s.trim().isEmpty()) {
MALLTY2_IFLAG = new Double(s);
} else {
MALLTY2_IFLAG = Double.NaN;
}
}

protected final void initMALLTY3(String s) {
if (!s.trim().isEmpty()) {
MALLTY3 = new Double(s);
} else {
MALLTY3 = Double.NaN;
}
}

protected final void initMARRS2(String s) {
if (!s.trim().isEmpty()) {
MARRS2 = new Double(s);
} else {
MARRS2 = Double.NaN;
}
}

protected final void initMARRS3(String s) {
if (!s.trim().isEmpty()) {
MARRS3 = new Double(s);
} else {
MARRS3 = Double.NaN;
}
}

protected final void initMENDNUM2(String s) {
if (!s.trim().isEmpty()) {
MENDNUM2 = new Double(s);
} else {
MENDNUM2 = Double.NaN;
}
}

protected final void initMENDNUM2_I(String s) {
if (!s.trim().isEmpty()) {
MENDNUM2_I = new Double(s);
} else {
MENDNUM2_I = Double.NaN;
}
}

protected final void initMENDNUM2_IFLAG(String s) {
if (!s.trim().isEmpty()) {
MENDNUM2_IFLAG = new Double(s);
} else {
MENDNUM2_IFLAG = Double.NaN;
}
}

protected final void initMENDNUM3(String s) {
if (!s.trim().isEmpty()) {
MENDNUM3 = new Double(s);
} else {
MENDNUM3 = Double.NaN;
}
}

protected final void initMENDV11(String s) {
if (!s.trim().isEmpty()) {
MENDV11 = new Double(s);
} else {
MENDV11 = Double.NaN;
}
}

protected final void initMENDV2(String s) {
if (!s.trim().isEmpty()) {
MENDV2 = new Double(s);
} else {
MENDV2 = Double.NaN;
}
}

protected final void initMENDV2_I(String s) {
if (!s.trim().isEmpty()) {
MENDV2_I = new Double(s);
} else {
MENDV2_I = Double.NaN;
}
}

protected final void initMENDV2_IFLAG(String s) {
if (!s.trim().isEmpty()) {
MENDV2_IFLAG = new Double(s);
} else {
MENDV2_IFLAG = Double.NaN;
}
}

protected final void initMENDV3(String s) {
if (!s.trim().isEmpty()) {
MENDV3 = new Double(s);
} else {
MENDV3 = Double.NaN;
}
}

protected final void initMENDV3_I(String s) {
if (!s.trim().isEmpty()) {
MENDV3_I = new Double(s);
} else {
MENDV3_I = Double.NaN;
}
}

protected final void initMENDV3_IFLAG(String s) {
if (!s.trim().isEmpty()) {
MENDV3_IFLAG = new Double(s);
} else {
MENDV3_IFLAG = Double.NaN;
}
}

protected final void initMENDV4(String s) {
if (!s.trim().isEmpty()) {
MENDV4 = new Double(s);
} else {
MENDV4 = Double.NaN;
}
}

protected final void initMENDV4_I(String s) {
if (!s.trim().isEmpty()) {
MENDV4_I = new Double(s);
} else {
MENDV4_I = Double.NaN;
}
}

protected final void initMENDV4_IFLAG(String s) {
if (!s.trim().isEmpty()) {
MENDV4_IFLAG = new Double(s);
} else {
MENDV4_IFLAG = Double.NaN;
}
}

protected final void initMENDV5(String s) {
if (!s.trim().isEmpty()) {
MENDV5 = new Double(s);
} else {
MENDV5 = Double.NaN;
}
}

protected final void initMENDV6(String s) {
if (!s.trim().isEmpty()) {
MENDV6 = new Double(s);
} else {
MENDV6 = Double.NaN;
}
}

protected final void initMENDV6_I(String s) {
if (!s.trim().isEmpty()) {
MENDV6_I = new Double(s);
} else {
MENDV6_I = Double.NaN;
}
}

protected final void initMENDV6_IFLAG(String s) {
if (!s.trim().isEmpty()) {
MENDV6_IFLAG = new Double(s);
} else {
MENDV6_IFLAG = Double.NaN;
}
}

protected final void initMENDV7(String s) {
if (!s.trim().isEmpty()) {
MENDV7 = new Double(s);
} else {
MENDV7 = Double.NaN;
}
}

protected final void initMENDV8(String s) {
if (!s.trim().isEmpty()) {
MENDV8 = new Double(s);
} else {
MENDV8 = Double.NaN;
}
}

protected final void initMENDVB11(String s) {
if (!s.trim().isEmpty()) {
MENDVB11 = new Double(s);
} else {
MENDVB11 = Double.NaN;
}
}

protected final void initMENDVB2(String s) {
if (!s.trim().isEmpty()) {
MENDVB2 = new Double(s);
} else {
MENDVB2 = Double.NaN;
}
}

protected final void initMENDVB3(String s) {
if (!s.trim().isEmpty()) {
MENDVB3 = new Double(s);
} else {
MENDVB3 = Double.NaN;
}
}

protected final void initMENDVB4(String s) {
if (!s.trim().isEmpty()) {
MENDVB4 = new Double(s);
} else {
MENDVB4 = Double.NaN;
}
}

protected final void initMENDVB6(String s) {
if (!s.trim().isEmpty()) {
MENDVB6 = new Double(s);
} else {
MENDVB6 = Double.NaN;
}
}

protected final void initMENDVB7(String s) {
if (!s.trim().isEmpty()) {
MENDVB7 = new Double(s);
} else {
MENDVB7 = Double.NaN;
}
}

protected final void initMENDW2_I(String s) {
if (!s.trim().isEmpty()) {
MENDW2_I = new Double(s);
} else {
MENDW2_I = Double.NaN;
}
}

protected final void initMENDW2_IFLAG(String s) {
if (!s.trim().isEmpty()) {
MENDW2_IFLAG = new Double(s);
} else {
MENDW2_IFLAG = Double.NaN;
}
}

protected final void initMENDW3_I(String s) {
if (!s.trim().isEmpty()) {
MENDW3_I = new Double(s);
} else {
MENDW3_I = Double.NaN;
}
}

protected final void initMENDW3_IFLAG(String s) {
if (!s.trim().isEmpty()) {
MENDW3_IFLAG = new Double(s);
} else {
MENDW3_IFLAG = Double.NaN;
}
}

protected final void initMENDX2(String s) {
if (!s.trim().isEmpty()) {
MENDX2 = new Double(s);
} else {
MENDX2 = Double.NaN;
}
}

protected final void initMENDX3(String s) {
if (!s.trim().isEmpty()) {
MENDX3 = new Double(s);
} else {
MENDX3 = Double.NaN;
}
}

protected final void initMENDY11(String s) {
if (!s.trim().isEmpty()) {
MENDY11 = new Double(s);
} else {
MENDY11 = Double.NaN;
}
}

protected final void initMENDY2(String s) {
if (!s.trim().isEmpty()) {
MENDY2 = new Double(s);
} else {
MENDY2 = Double.NaN;
}
}

protected final void initMENDY3(String s) {
if (!s.trim().isEmpty()) {
MENDY3 = new Double(s);
} else {
MENDY3 = Double.NaN;
}
}

protected final void initMENDY4(String s) {
if (!s.trim().isEmpty()) {
MENDY4 = new Double(s);
} else {
MENDY4 = Double.NaN;
}
}

protected final void initMENDY6(String s) {
if (!s.trim().isEmpty()) {
MENDY6 = new Double(s);
} else {
MENDY6 = Double.NaN;
}
}

protected final void initMENDY7(String s) {
if (!s.trim().isEmpty()) {
MENDY7 = new Double(s);
} else {
MENDY7 = Double.NaN;
}
}

protected final void initMHOWPY2(String s) {
if (!s.trim().isEmpty()) {
MHOWPY2 = new Double(s);
} else {
MHOWPY2 = Double.NaN;
}
}

protected final void initMHOWPY3(String s) {
if (!s.trim().isEmpty()) {
MHOWPY3 = new Double(s);
} else {
MHOWPY3 = Double.NaN;
}
}

protected final void initMINC1(String s) {
if (!s.trim().isEmpty()) {
MINC1 = new Double(s);
} else {
MINC1 = Double.NaN;
}
}

protected final void initMINC11(String s) {
if (!s.trim().isEmpty()) {
MINC11 = new Double(s);
} else {
MINC11 = Double.NaN;
}
}

protected final void initMINC2(String s) {
if (!s.trim().isEmpty()) {
MINC2 = new Double(s);
} else {
MINC2 = Double.NaN;
}
}

protected final void initMINC3(String s) {
if (!s.trim().isEmpty()) {
MINC3 = new Double(s);
} else {
MINC3 = Double.NaN;
}
}

protected final void initMINC4(String s) {
if (!s.trim().isEmpty()) {
MINC4 = new Double(s);
} else {
MINC4 = Double.NaN;
}
}

protected final void initMINC5(String s) {
if (!s.trim().isEmpty()) {
MINC5 = new Double(s);
} else {
MINC5 = Double.NaN;
}
}

protected final void initMINC6(String s) {
if (!s.trim().isEmpty()) {
MINC6 = new Double(s);
} else {
MINC6 = Double.NaN;
}
}

protected final void initMJNAME01(String s) {
if (!s.trim().isEmpty()) {
MJNAME01 = new Double(s);
} else {
MJNAME01 = Double.NaN;
}
}

protected final void initMJNAME02(String s) {
if (!s.trim().isEmpty()) {
MJNAME02 = new Double(s);
} else {
MJNAME02 = Double.NaN;
}
}

protected final void initMJNAME03(String s) {
if (!s.trim().isEmpty()) {
MJNAME03 = new Double(s);
} else {
MJNAME03 = Double.NaN;
}
}

protected final void initMJNAME04(String s) {
if (!s.trim().isEmpty()) {
MJNAME04 = new Double(s);
} else {
MJNAME04 = Double.NaN;
}
}

protected final void initMJNAME18(String s) {
if (!s.trim().isEmpty()) {
MJNAME18 = new Double(s);
} else {
MJNAME18 = Double.NaN;
}
}

protected final void initMJNAME19(String s) {
if (!s.trim().isEmpty()) {
MJNAME19 = new Double(s);
} else {
MJNAME19 = Double.NaN;
}
}

protected final void initMJNAME20(String s) {
if (!s.trim().isEmpty()) {
MJNAME20 = new Double(s);
} else {
MJNAME20 = Double.NaN;
}
}

protected final void initMJNAME35(String s) {
if (!s.trim().isEmpty()) {
MJNAME35 = new Double(s);
} else {
MJNAME35 = Double.NaN;
}
}

protected final void initMJNAME36(String s) {
if (!s.trim().isEmpty()) {
MJNAME36 = new Double(s);
} else {
MJNAME36 = Double.NaN;
}
}

protected final void initMNAME2(String s) {
if (!s.trim().isEmpty()) {
MNAME2 = new Double(s);
} else {
MNAME2 = Double.NaN;
}
}

protected final void initMNAME3(String s) {
if (!s.trim().isEmpty()) {
MNAME3 = new Double(s);
} else {
MNAME3 = Double.NaN;
}
}

protected final void initMNEG2(String s) {
if (!s.trim().isEmpty()) {
MNEG2 = new Double(s);
} else {
MNEG2 = Double.NaN;
}
}

protected final void initMNEG2_I(String s) {
if (!s.trim().isEmpty()) {
MNEG2_I = new Double(s);
} else {
MNEG2_I = Double.NaN;
}
}

protected final void initMNEG2_IFLAG(String s) {
if (!s.trim().isEmpty()) {
MNEG2_IFLAG = new Double(s);
} else {
MNEG2_IFLAG = Double.NaN;
}
}

protected final void initMNEG3(String s) {
if (!s.trim().isEmpty()) {
MNEG3 = new Double(s);
} else {
MNEG3 = Double.NaN;
}
}

protected final void initMNEGB2(String s) {
if (!s.trim().isEmpty()) {
MNEGB2 = new Double(s);
} else {
MNEGB2 = Double.NaN;
}
}

protected final void initMNEGB3(String s) {
if (!s.trim().isEmpty()) {
MNEGB3 = new Double(s);
} else {
MNEGB3 = Double.NaN;
}
}

protected final void initMNUMB(String s) {
if (!s.trim().isEmpty()) {
MNUMB = new Double(s);
} else {
MNUMB = Double.NaN;
}
}

protected final void initMONAME2(String s) {
if (!s.trim().isEmpty()) {
MONAME2 = new Double(s);
} else {
MONAME2 = Double.NaN;
}
}

protected final void initMONAME3(String s) {
if (!s.trim().isEmpty()) {
MONAME3 = new Double(s);
} else {
MONAME3 = Double.NaN;
}
}

protected final void initMONTH(String s) {
if (!s.trim().isEmpty()) {
MONTH = new Double(s);
} else {
MONTH = Double.NaN;
}
}

protected final void initMPAYB2(String s) {
if (!s.trim().isEmpty()) {
MPAYB2 = new Double(s);
} else {
MPAYB2 = Double.NaN;
}
}

protected final void initMPAYB3(String s) {
if (!s.trim().isEmpty()) {
MPAYB3 = new Double(s);
} else {
MPAYB3 = Double.NaN;
}
}

protected final void initMPAYM2(String s) {
if (!s.trim().isEmpty()) {
MPAYM2 = new Double(s);
} else {
MPAYM2 = Double.NaN;
}
}

protected final void initMPAYM3(String s) {
if (!s.trim().isEmpty()) {
MPAYM3 = new Double(s);
} else {
MPAYM3 = Double.NaN;
}
}

protected final void initMPP2(String s) {
if (!s.trim().isEmpty()) {
MPP2 = new Double(s);
} else {
MPP2 = Double.NaN;
}
}

protected final void initMPP3(String s) {
if (!s.trim().isEmpty()) {
MPP3 = new Double(s);
} else {
MPP3 = Double.NaN;
}
}

protected final void initMREAS01(String s) {
if (!s.trim().isEmpty()) {
MREAS01 = new Double(s);
} else {
MREAS01 = Double.NaN;
}
}

protected final void initMREAS02(String s) {
if (!s.trim().isEmpty()) {
MREAS02 = new Double(s);
} else {
MREAS02 = Double.NaN;
}
}

protected final void initMREAS03(String s) {
if (!s.trim().isEmpty()) {
MREAS03 = new Double(s);
} else {
MREAS03 = Double.NaN;
}
}

protected final void initMREAS04(String s) {
if (!s.trim().isEmpty()) {
MREAS04 = new Double(s);
} else {
MREAS04 = Double.NaN;
}
}

protected final void initMREAS05(String s) {
if (!s.trim().isEmpty()) {
MREAS05 = new Double(s);
} else {
MREAS05 = Double.NaN;
}
}

protected final void initMREAS06(String s) {
if (!s.trim().isEmpty()) {
MREAS06 = new Double(s);
} else {
MREAS06 = Double.NaN;
}
}

protected final void initMREAS07(String s) {
if (!s.trim().isEmpty()) {
MREAS07 = new Double(s);
} else {
MREAS07 = Double.NaN;
}
}

protected final void initMREAS12(String s) {
if (!s.trim().isEmpty()) {
MREAS12 = new Double(s);
} else {
MREAS12 = Double.NaN;
}
}

protected final void initMREAS13(String s) {
if (!s.trim().isEmpty()) {
MREAS13 = new Double(s);
} else {
MREAS13 = Double.NaN;
}
}

protected final void initMREAS23(String s) {
if (!s.trim().isEmpty()) {
MREAS23 = new Double(s);
} else {
MREAS23 = Double.NaN;
}
}

protected final void initMTYPE2(String s) {
if (!s.trim().isEmpty()) {
MTYPE2 = new Double(s);
} else {
MTYPE2 = Double.NaN;
}
}

protected final void initMTYPE2_I(String s) {
if (!s.trim().isEmpty()) {
MTYPE2_I = new Double(s);
} else {
MTYPE2_I = Double.NaN;
}
}

protected final void initMTYPE2_IFLAG(String s) {
if (!s.trim().isEmpty()) {
MTYPE2_IFLAG = new Double(s);
} else {
MTYPE2_IFLAG = Double.NaN;
}
}

protected final void initMTYPE3(String s) {
if (!s.trim().isEmpty()) {
MTYPE3 = new Double(s);
} else {
MTYPE3 = Double.NaN;
}
}

protected final void initMTYPE3_I(String s) {
if (!s.trim().isEmpty()) {
MTYPE3_I = new Double(s);
} else {
MTYPE3_I = Double.NaN;
}
}

protected final void initMTYPE3_IFLAG(String s) {
if (!s.trim().isEmpty()) {
MTYPE3_IFLAG = new Double(s);
} else {
MTYPE3_IFLAG = Double.NaN;
}
}

protected final void initMVAL2(String s) {
if (!s.trim().isEmpty()) {
MVAL2 = new Double(s);
} else {
MVAL2 = Double.NaN;
}
}

protected final void initMVAL2_I(String s) {
if (!s.trim().isEmpty()) {
MVAL2_I = new Double(s);
} else {
MVAL2_I = Double.NaN;
}
}

protected final void initMVAL2_IFLAG(String s) {
if (!s.trim().isEmpty()) {
MVAL2_IFLAG = new Double(s);
} else {
MVAL2_IFLAG = Double.NaN;
}
}

protected final void initMVAL3(String s) {
if (!s.trim().isEmpty()) {
MVAL3 = new Double(s);
} else {
MVAL3 = Double.NaN;
}
}

protected final void initMVAL3_I(String s) {
if (!s.trim().isEmpty()) {
MVAL3_I = new Double(s);
} else {
MVAL3_I = Double.NaN;
}
}

protected final void initMVAL3_IFLAG(String s) {
if (!s.trim().isEmpty()) {
MVAL3_IFLAG = new Double(s);
} else {
MVAL3_IFLAG = Double.NaN;
}
}

protected final void initMVALB2(String s) {
if (!s.trim().isEmpty()) {
MVALB2 = new Double(s);
} else {
MVALB2 = Double.NaN;
}
}

protected final void initMVALB3(String s) {
if (!s.trim().isEmpty()) {
MVALB3 = new Double(s);
} else {
MVALB3 = Double.NaN;
}
}

protected final void initMYLFT2(String s) {
if (!s.trim().isEmpty()) {
MYLFT2 = new Double(s);
} else {
MYLFT2 = Double.NaN;
}
}

protected final void initMYLFT3(String s) {
if (!s.trim().isEmpty()) {
MYLFT3 = new Double(s);
} else {
MYLFT3 = Double.NaN;
}
}

protected final void initNUMADULT(String s) {
if (!s.trim().isEmpty()) {
NUMADULT = new Double(s);
} else {
NUMADULT = Double.NaN;
}
}

protected final void initNUMCH18(String s) {
if (!s.trim().isEmpty()) {
NUMCH18 = new Double(s);
} else {
NUMCH18 = Double.NaN;
}
}

protected final void initNUMCHILD(String s) {
if (!s.trim().isEmpty()) {
NUMCHILD = new Double(s);
} else {
NUMCHILD = Double.NaN;
}
}

protected final void initNUMCIVPTR(String s) {
if (!s.trim().isEmpty()) {
NUMCIVPTR = new Double(s);
} else {
NUMCIVPTR = Double.NaN;
}
}

protected final void initNUMCPART(String s) {
if (!s.trim().isEmpty()) {
NUMCPART = new Double(s);
} else {
NUMCPART = Double.NaN;
}
}

protected final void initNUMHHLDR(String s) {
if (!s.trim().isEmpty()) {
NUMHHLDR = new Double(s);
} else {
NUMHHLDR = Double.NaN;
}
}

protected final void initNUMMPART(String s) {
if (!s.trim().isEmpty()) {
NUMMPART = new Double(s);
} else {
NUMMPART = Double.NaN;
}
}

protected final void initOFINAL(String s) {
if (!s.trim().isEmpty()) {
OFINAL = new Double(s);
} else {
OFINAL = Double.NaN;
}
}

protected final void initTEN1(String s) {
if (!s.trim().isEmpty()) {
TEN1 = new Double(s);
} else {
TEN1 = Double.NaN;
}
}

protected final void initTEN1_I(String s) {
if (!s.trim().isEmpty()) {
TEN1_I = new Double(s);
} else {
TEN1_I = Double.NaN;
}
}

protected final void initTEN1_IFLAG(String s) {
if (!s.trim().isEmpty()) {
TEN1_IFLAG = new Double(s);
} else {
TEN1_IFLAG = Double.NaN;
}
}

protected final void initTIED(String s) {
if (!s.trim().isEmpty()) {
TIED = new Double(s);
} else {
TIED = Double.NaN;
}
}

protected final void initTOTMNEG(String s) {
if (!s.trim().isEmpty()) {
TOTMNEG = new Double(s);
} else {
TOTMNEG = Double.NaN;
}
}

protected final void initTOTMORT(String s) {
if (!s.trim().isEmpty()) {
TOTMORT = new Double(s);
} else {
TOTMORT = Double.NaN;
}
}

protected final void initTOTMVAL(String s) {
if (!s.trim().isEmpty()) {
TOTMVAL = new Double(s);
} else {
TOTMVAL = Double.NaN;
}
}

protected final void initTOTWLTH(String s) {
if (!s.trim().isEmpty()) {
TOTWLTH = new Double(s);
} else {
TOTWLTH = Double.NaN;
}
}

protected final void initVCARN(String s) {
if (!s.trim().isEmpty()) {
VCARN = new Double(s);
} else {
VCARN = Double.NaN;
}
}

protected final void initVCARN_I(String s) {
if (!s.trim().isEmpty()) {
VCARN_I = new Double(s);
} else {
VCARN_I = Double.NaN;
}
}

protected final void initVCARN_IFLAG(String s) {
if (!s.trim().isEmpty()) {
VCARN_IFLAG = new Double(s);
} else {
VCARN_IFLAG = Double.NaN;
}
}

protected final void initVOTYP1(String s) {
if (!s.trim().isEmpty()) {
VOTYP1 = new Double(s);
} else {
VOTYP1 = Double.NaN;
}
}

protected final void initVOTYP1_I(String s) {
if (!s.trim().isEmpty()) {
VOTYP1_I = new Double(s);
} else {
VOTYP1_I = Double.NaN;
}
}

protected final void initVOTYP2(String s) {
if (!s.trim().isEmpty()) {
VOTYP2 = new Double(s);
} else {
VOTYP2 = Double.NaN;
}
}

protected final void initVOTYP2_I(String s) {
if (!s.trim().isEmpty()) {
VOTYP2_I = new Double(s);
} else {
VOTYP2_I = Double.NaN;
}
}

protected final void initVOTYP3(String s) {
if (!s.trim().isEmpty()) {
VOTYP3 = new Double(s);
} else {
VOTYP3 = Double.NaN;
}
}

protected final void initVOTYP3_I(String s) {
if (!s.trim().isEmpty()) {
VOTYP3_I = new Double(s);
} else {
VOTYP3_I = Double.NaN;
}
}

protected final void initVOTYP4(String s) {
if (!s.trim().isEmpty()) {
VOTYP4 = new Double(s);
} else {
VOTYP4 = Double.NaN;
}
}

protected final void initVOTYP4_I(String s) {
if (!s.trim().isEmpty()) {
VOTYP4_I = new Double(s);
} else {
VOTYP4_I = Double.NaN;
}
}

protected final void initVOTYP5_I(String s) {
if (!s.trim().isEmpty()) {
VOTYP5_I = new Double(s);
} else {
VOTYP5_I = Double.NaN;
}
}

protected final void initVOVAL(String s) {
if (!s.trim().isEmpty()) {
VOVAL = new Double(s);
} else {
VOVAL = Double.NaN;
}
}

protected final void initVOVAL_I(String s) {
if (!s.trim().isEmpty()) {
VOVAL_I = new Double(s);
} else {
VOVAL_I = Double.NaN;
}
}

protected final void initVOVAL_IFLAG(String s) {
if (!s.trim().isEmpty()) {
VOVAL_IFLAG = new Double(s);
} else {
VOVAL_IFLAG = Double.NaN;
}
}

protected final void initVOVLB(String s) {
if (!s.trim().isEmpty()) {
VOVLB = new Double(s);
} else {
VOVLB = Double.NaN;
}
}

protected final void initVPERS(String s) {
if (!s.trim().isEmpty()) {
VPERS = new Double(s);
} else {
VPERS = Double.NaN;
}
}

protected final void initVPERV(String s) {
if (!s.trim().isEmpty()) {
VPERV = new Double(s);
} else {
VPERV = Double.NaN;
}
}

protected final void initVPERV_I(String s) {
if (!s.trim().isEmpty()) {
VPERV_I = new Double(s);
} else {
VPERV_I = Double.NaN;
}
}

protected final void initVPERV_IFLAG(String s) {
if (!s.trim().isEmpty()) {
VPERV_IFLAG = new Double(s);
} else {
VPERV_IFLAG = Double.NaN;
}
}

protected final void initVTYPE2(String s) {
if (!s.trim().isEmpty()) {
VTYPE2 = new Double(s);
} else {
VTYPE2 = Double.NaN;
}
}

protected final void initVTYPE2_I(String s) {
if (!s.trim().isEmpty()) {
VTYPE2_I = new Double(s);
} else {
VTYPE2_I = Double.NaN;
}
}

protected final void initVTYPE_IFLAG(String s) {
if (!s.trim().isEmpty()) {
VTYPE_IFLAG = new Double(s);
} else {
VTYPE_IFLAG = Double.NaN;
}
}

protected final void initYEAR(String s) {
if (!s.trim().isEmpty()) {
YEAR = new Double(s);
} else {
YEAR = Double.NaN;
}
}

public double getACCOM() {
return ACCOM;
}

public double getACCOTH() {
return ACCOTH;
}

public double getALLENDW() {
return ALLENDW;
}

public double getALLGD() {
return ALLGD;
}

public Integer getCASEW1() {
return CASEW1;
}

public double getDVEQRELVAL() {
return DVEQRELVAL;
}

public double getDVGCOLLV() {
return DVGCOLLV;
}

public double getDVHORP() {
return DVHORP;
}

public double getDVHSIZE() {
return DVHSIZE;
}

public double getDVHVALUE() {
return DVHVALUE;
}

public double getDVPRIRNT() {
return DVPRIRNT;
}

public double getDVPROPERTY() {
return DVPROPERTY;
}

public double getDVTOTOTHVEHVAL() {
return DVTOTOTHVEHVAL;
}

public double getDVTOTPERNPVAL() {
return DVTOTPERNPVAL;
}

public double getDVTOTVEHVAL() {
return DVTOTVEHVAL;
}

public double getEINTRAT() {
return EINTRAT;
}

public double getEINTRAT_I() {
return EINTRAT_I;
}

public double getEINTRAT_IFLAG() {
return EINTRAT_IFLAG;
}

public double getEOTHREG() {
return EOTHREG;
}

public double getEOTHRVA() {
return EOTHRVA;
}

public double getEOTHRVB() {
return EOTHRVB;
}

public double getEPRPER() {
return EPRPER;
}

public double getEPRVAL() {
return EPRVAL;
}

public double getEPRVPAY() {
return EPRVPAY;
}

public double getEQVAL() {
return EQVAL;
}

public double getEQVALB() {
return EQVALB;
}

public double getEQVAL_I() {
return EQVAL_I;
}

public double getEQVAL_IFLAG() {
return EQVAL_IFLAG;
}

public double getEQYES() {
return EQYES;
}

public double getERECTAX() {
return ERECTAX;
}

public double getERVPRP() {
return ERVPRP;
}

public double getERVPRP_I() {
return ERVPRP_I;
}

public double getERVPRP_IFLAG() {
return ERVPRP_IFLAG;
}

public double getERVRENT() {
return ERVRENT;
}

public double getERVSUM() {
return ERVSUM;
}

public double getERVSUMB() {
return ERVSUMB;
}

public double getERVTAX() {
return ERVTAX;
}

public double getFLTTYP() {
return FLTTYP;
}

public double getFURN() {
return FURN;
}

public double getGCOLLEC() {
return GCOLLEC;
}

public double getGCOLLEC_I() {
return GCOLLEC_I;
}

public double getGCOLLEC_IFLAG() {
return GCOLLEC_IFLAG;
}

public double getGCOLLV() {
return GCOLLV;
}

public double getGCOLLVB() {
return GCOLLVB;
}

public double getGCOLLV_I() {
return GCOLLV_I;
}

public double getGCOLLV_IFLAG() {
return GCOLLV_IFLAG;
}

public double getGCONTVB() {
return GCONTVB;
}

public double getGCONTVB_I() {
return GCONTVB_I;
}

public double getGCONTVB_IFLAG() {
return GCONTVB_IFLAG;
}

public double getGOR() {
return GOR;
}

public double getHAGEB() {
return HAGEB;
}

public double getHAGEYR() {
return HAGEYR;
}

public double getHBEDRM() {
return HBEDRM;
}

public double getHBFROM() {
return HBFROM;
}

public double getHBUYSE() {
return HBUYSE;
}

public double getHBUYYR() {
return HBUYYR;
}

public double getHFINWNT_SUM() {
return HFINWNT_SUM;
}

public double getHFINW_SUM() {
return HFINW_SUM;
}

public double getHHOLDTYPE() {
return HHOLDTYPE;
}

public double getHHOSCH() {
return HHOSCH;
}

public double getHHOWN() {
return HHOWN;
}

public double getHMORTG() {
return HMORTG;
}

public double getHOUSGDST_SUM() {
return HOUSGDST_SUM;
}

public double getHOUT() {
return HOUT;
}

public double getHPHYSW() {
return HPHYSW;
}

public double getHPRICE() {
return HPRICE;
}

public double getHPRICEB() {
return HPRICEB;
}

public double getHPROPW() {
return HPROPW;
}

public double getHRPDVAGE9() {
return HRPDVAGE9;
}

public double getHRPDVILO3A() {
return HRPDVILO3A;
}

public double getHRPDVMRDF() {
return HRPDVMRDF;
}

public double getHRPEDATTN1() {
return HRPEDATTN1;
}

public double getHRPEDATTN2() {
return HRPEDATTN2;
}

public double getHRPEDATTN3() {
return HRPEDATTN3;
}

public double getHRPEDLEVEL() {
return HRPEDLEVEL;
}

public double getHRPNSSEC3() {
return HRPNSSEC3;
}

public double getHRPSEX() {
return HRPSEX;
}

public double getHRTBEV() {
return HRTBEV;
}

public double getHSETYPE() {
return HSETYPE;
}

public double getHSHARE() {
return HSHARE;
}

public double getHSHAREP() {
return HSHAREP;
}

public double getHSHAREP_I() {
return HSHAREP_I;
}

public double getHSHAREP_IFLAG() {
return HSHAREP_IFLAG;
}

public double getHSHARE_I() {
return HSHARE_I;
}

public double getHSHARE_IFLAG() {
return HSHARE_IFLAG;
}

public double getHVALB() {
return HVALB;
}

public double getHVALUE() {
return HVALUE;
}

public double getHVALUE_I() {
return HVALUE_I;
}

public double getHVALUE_IFLAG() {
return HVALUE_IFLAG;
}

public double getLLORD() {
return LLORD;
}

public double getMALL2() {
return MALL2;
}

public double getMALL2_I() {
return MALL2_I;
}

public double getMALL2_IFLAG() {
return MALL2_IFLAG;
}

public double getMALL3() {
return MALL3;
}

public double getMALL3_I() {
return MALL3_I;
}

public double getMALL3_IFLAG() {
return MALL3_IFLAG;
}

public double getMALLTY2() {
return MALLTY2;
}

public double getMALLTY2_I() {
return MALLTY2_I;
}

public double getMALLTY2_IFLAG() {
return MALLTY2_IFLAG;
}

public double getMALLTY3() {
return MALLTY3;
}

public double getMARRS2() {
return MARRS2;
}

public double getMARRS3() {
return MARRS3;
}

public double getMENDNUM2() {
return MENDNUM2;
}

public double getMENDNUM2_I() {
return MENDNUM2_I;
}

public double getMENDNUM2_IFLAG() {
return MENDNUM2_IFLAG;
}

public double getMENDNUM3() {
return MENDNUM3;
}

public double getMENDV11() {
return MENDV11;
}

public double getMENDV2() {
return MENDV2;
}

public double getMENDV2_I() {
return MENDV2_I;
}

public double getMENDV2_IFLAG() {
return MENDV2_IFLAG;
}

public double getMENDV3() {
return MENDV3;
}

public double getMENDV3_I() {
return MENDV3_I;
}

public double getMENDV3_IFLAG() {
return MENDV3_IFLAG;
}

public double getMENDV4() {
return MENDV4;
}

public double getMENDV4_I() {
return MENDV4_I;
}

public double getMENDV4_IFLAG() {
return MENDV4_IFLAG;
}

public double getMENDV5() {
return MENDV5;
}

public double getMENDV6() {
return MENDV6;
}

public double getMENDV6_I() {
return MENDV6_I;
}

public double getMENDV6_IFLAG() {
return MENDV6_IFLAG;
}

public double getMENDV7() {
return MENDV7;
}

public double getMENDV8() {
return MENDV8;
}

public double getMENDVB11() {
return MENDVB11;
}

public double getMENDVB2() {
return MENDVB2;
}

public double getMENDVB3() {
return MENDVB3;
}

public double getMENDVB4() {
return MENDVB4;
}

public double getMENDVB6() {
return MENDVB6;
}

public double getMENDVB7() {
return MENDVB7;
}

public double getMENDW2_I() {
return MENDW2_I;
}

public double getMENDW2_IFLAG() {
return MENDW2_IFLAG;
}

public double getMENDW3_I() {
return MENDW3_I;
}

public double getMENDW3_IFLAG() {
return MENDW3_IFLAG;
}

public double getMENDX2() {
return MENDX2;
}

public double getMENDX3() {
return MENDX3;
}

public double getMENDY11() {
return MENDY11;
}

public double getMENDY2() {
return MENDY2;
}

public double getMENDY3() {
return MENDY3;
}

public double getMENDY4() {
return MENDY4;
}

public double getMENDY6() {
return MENDY6;
}

public double getMENDY7() {
return MENDY7;
}

public double getMHOWPY2() {
return MHOWPY2;
}

public double getMHOWPY3() {
return MHOWPY3;
}

public double getMINC1() {
return MINC1;
}

public double getMINC11() {
return MINC11;
}

public double getMINC2() {
return MINC2;
}

public double getMINC3() {
return MINC3;
}

public double getMINC4() {
return MINC4;
}

public double getMINC5() {
return MINC5;
}

public double getMINC6() {
return MINC6;
}

public double getMJNAME01() {
return MJNAME01;
}

public double getMJNAME02() {
return MJNAME02;
}

public double getMJNAME03() {
return MJNAME03;
}

public double getMJNAME04() {
return MJNAME04;
}

public double getMJNAME18() {
return MJNAME18;
}

public double getMJNAME19() {
return MJNAME19;
}

public double getMJNAME20() {
return MJNAME20;
}

public double getMJNAME35() {
return MJNAME35;
}

public double getMJNAME36() {
return MJNAME36;
}

public double getMNAME2() {
return MNAME2;
}

public double getMNAME3() {
return MNAME3;
}

public double getMNEG2() {
return MNEG2;
}

public double getMNEG2_I() {
return MNEG2_I;
}

public double getMNEG2_IFLAG() {
return MNEG2_IFLAG;
}

public double getMNEG3() {
return MNEG3;
}

public double getMNEGB2() {
return MNEGB2;
}

public double getMNEGB3() {
return MNEGB3;
}

public double getMNUMB() {
return MNUMB;
}

public double getMONAME2() {
return MONAME2;
}

public double getMONAME3() {
return MONAME3;
}

public double getMONTH() {
return MONTH;
}

public double getMPAYB2() {
return MPAYB2;
}

public double getMPAYB3() {
return MPAYB3;
}

public double getMPAYM2() {
return MPAYM2;
}

public double getMPAYM3() {
return MPAYM3;
}

public double getMPP2() {
return MPP2;
}

public double getMPP3() {
return MPP3;
}

public double getMREAS01() {
return MREAS01;
}

public double getMREAS02() {
return MREAS02;
}

public double getMREAS03() {
return MREAS03;
}

public double getMREAS04() {
return MREAS04;
}

public double getMREAS05() {
return MREAS05;
}

public double getMREAS06() {
return MREAS06;
}

public double getMREAS07() {
return MREAS07;
}

public double getMREAS12() {
return MREAS12;
}

public double getMREAS13() {
return MREAS13;
}

public double getMREAS23() {
return MREAS23;
}

public double getMTYPE2() {
return MTYPE2;
}

public double getMTYPE2_I() {
return MTYPE2_I;
}

public double getMTYPE2_IFLAG() {
return MTYPE2_IFLAG;
}

public double getMTYPE3() {
return MTYPE3;
}

public double getMTYPE3_I() {
return MTYPE3_I;
}

public double getMTYPE3_IFLAG() {
return MTYPE3_IFLAG;
}

public double getMVAL2() {
return MVAL2;
}

public double getMVAL2_I() {
return MVAL2_I;
}

public double getMVAL2_IFLAG() {
return MVAL2_IFLAG;
}

public double getMVAL3() {
return MVAL3;
}

public double getMVAL3_I() {
return MVAL3_I;
}

public double getMVAL3_IFLAG() {
return MVAL3_IFLAG;
}

public double getMVALB2() {
return MVALB2;
}

public double getMVALB3() {
return MVALB3;
}

public double getMYLFT2() {
return MYLFT2;
}

public double getMYLFT3() {
return MYLFT3;
}

public double getNUMADULT() {
return NUMADULT;
}

public double getNUMCH18() {
return NUMCH18;
}

public double getNUMCHILD() {
return NUMCHILD;
}

public double getNUMCIVPTR() {
return NUMCIVPTR;
}

public double getNUMCPART() {
return NUMCPART;
}

public double getNUMHHLDR() {
return NUMHHLDR;
}

public double getNUMMPART() {
return NUMMPART;
}

public double getOFINAL() {
return OFINAL;
}

public double getTEN1() {
return TEN1;
}

public double getTEN1_I() {
return TEN1_I;
}

public double getTEN1_IFLAG() {
return TEN1_IFLAG;
}

public double getTIED() {
return TIED;
}

public double getTOTMNEG() {
return TOTMNEG;
}

public double getTOTMORT() {
return TOTMORT;
}

public double getTOTMVAL() {
return TOTMVAL;
}

public double getTOTWLTH() {
return TOTWLTH;
}

public double getVCARN() {
return VCARN;
}

public double getVCARN_I() {
return VCARN_I;
}

public double getVCARN_IFLAG() {
return VCARN_IFLAG;
}

public double getVOTYP1() {
return VOTYP1;
}

public double getVOTYP1_I() {
return VOTYP1_I;
}

public double getVOTYP2() {
return VOTYP2;
}

public double getVOTYP2_I() {
return VOTYP2_I;
}

public double getVOTYP3() {
return VOTYP3;
}

public double getVOTYP3_I() {
return VOTYP3_I;
}

public double getVOTYP4() {
return VOTYP4;
}

public double getVOTYP4_I() {
return VOTYP4_I;
}

public double getVOTYP5_I() {
return VOTYP5_I;
}

public double getVOVAL() {
return VOVAL;
}

public double getVOVAL_I() {
return VOVAL_I;
}

public double getVOVAL_IFLAG() {
return VOVAL_IFLAG;
}

public double getVOVLB() {
return VOVLB;
}

public double getVPERS() {
return VPERS;
}

public double getVPERV() {
return VPERV;
}

public double getVPERV_I() {
return VPERV_I;
}

public double getVPERV_IFLAG() {
return VPERV_IFLAG;
}

public double getVTYPE2() {
return VTYPE2;
}

public double getVTYPE2_I() {
return VTYPE2_I;
}

public double getVTYPE_IFLAG() {
return VTYPE_IFLAG;
}

public double getYEAR() {
return YEAR;
}

}
