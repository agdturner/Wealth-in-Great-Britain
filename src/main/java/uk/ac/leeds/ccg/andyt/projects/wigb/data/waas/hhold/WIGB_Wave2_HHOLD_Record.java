/**
 * Source code generated by uk.ac.leeds.ccg.andyt.projects.wigb.process.WIGB_JavaCodeGenerator
 */
package uk.ac.leeds.ccg.andyt.projects.wigb.data.waas.hhold;
public class WIGB_Wave2_HHOLD_Record extends WIGB_Wave1Or2_HHOLD_Record {
protected double BUYLGDST_SUM;
protected Integer CASEW2;
protected double DVBLTDEBT;
protected double DVBLTVAL;
protected double DVNWFLN_SUM;
protected double DVNWILN_SUM;
protected double EQNEW;
protected double EQNEW_I;
protected double EQNEW_IFLAG;
protected double EQOLD;
protected double EQOLD_I;
protected double EQOLD_IFLAG;
protected double EQREAS5;
protected double EQREAS6;
protected double EQREAS7;
protected double EQREAS8;
protected double EQREAS9;
protected double HEXT1;
protected double HEXT2;
protected double HEXT3;
protected double HEXT4;
protected double HRPDVAGEW2BAND;
protected double H_FLAG1;
protected double H_FLAG2;
protected double H_FLAG4;
protected double H_FLAG5;
protected double MARRSV;
protected double MARRSV2;
protected double MARRSV3;
protected double MCHGE;
protected double MCHGENUM;
protected double MENDV10;
protected double MENDV12;
protected double MENDV13;
protected double MENDV14;
protected double MENDV15;
protected double MENDV9;
protected double MENDVB10;
protected double MENDVB12;
protected double MENDVB13;
protected double MENDVB14;
protected double MENDVB15;
protected double MENDVB9;
protected double MENDY10;
protected double MENDY12;
protected double MENDY13;
protected double MENDY14;
protected double MENDY15;
protected double MENDY9;
protected double MEND___W2;
protected double MEXTN;
protected double MEXTRS1;
protected double MEXTRS2;
protected double MEXTRS3;
protected double MEXTRS4;
protected double MEXTRS5;
protected double MEXTRS6;
protected double MEXTRS7;
protected double MEXTRS8;
protected double MEXTRS9;
protected double MINC10;
protected double MINC13;
protected double MINC14;
protected double MINC15;
protected double MNUMBN;
protected double MNUMBN_I;
protected double MNUMBN_IFLAG;
protected double MNUMBO;
protected double MNUMBO_I;
protected double MNUMBO_IFLAG;
protected double MORTID;
protected double MORTID2;
protected double MORTID3;
protected double MREAS14;
protected double MREAS15;
protected double MREAS24;
protected double MVALB2_I;
protected double MVALB2_IFLAG;
protected double MW1CHK1;
protected double MW1CHK2;
protected double MW1CHK3;
protected double MYIFCH;
protected double MYIFCH2;
protected double MYIFCH3;
protected double NOUNITS;
protected double NUMDEPCH_HH;
protected double NUMNDEP;
protected double VCADD;
protected double VCADDN;
protected double VPERS_I;
protected double VPERS_IFLAG;
protected double XS_CALWGT;
protected final void initBUYLGDST_SUM(String s) {
if (!s.trim().isEmpty()) {
BUYLGDST_SUM = new Double(s);
} else {
BUYLGDST_SUM = Double.NaN;
}
}

protected final void initCASEW2(String s) {
if (!s.trim().isEmpty()) {
CASEW2 = new Integer(s);
}
}

protected final void initDVBLTDEBT(String s) {
if (!s.trim().isEmpty()) {
DVBLTDEBT = new Double(s);
} else {
DVBLTDEBT = Double.NaN;
}
}

protected final void initDVBLTVAL(String s) {
if (!s.trim().isEmpty()) {
DVBLTVAL = new Double(s);
} else {
DVBLTVAL = Double.NaN;
}
}

protected final void initDVNWFLN_SUM(String s) {
if (!s.trim().isEmpty()) {
DVNWFLN_SUM = new Double(s);
} else {
DVNWFLN_SUM = Double.NaN;
}
}

protected final void initDVNWILN_SUM(String s) {
if (!s.trim().isEmpty()) {
DVNWILN_SUM = new Double(s);
} else {
DVNWILN_SUM = Double.NaN;
}
}

protected final void initEQNEW(String s) {
if (!s.trim().isEmpty()) {
EQNEW = new Double(s);
} else {
EQNEW = Double.NaN;
}
}

protected final void initEQNEW_I(String s) {
if (!s.trim().isEmpty()) {
EQNEW_I = new Double(s);
} else {
EQNEW_I = Double.NaN;
}
}

protected final void initEQNEW_IFLAG(String s) {
if (!s.trim().isEmpty()) {
EQNEW_IFLAG = new Double(s);
} else {
EQNEW_IFLAG = Double.NaN;
}
}

protected final void initEQOLD(String s) {
if (!s.trim().isEmpty()) {
EQOLD = new Double(s);
} else {
EQOLD = Double.NaN;
}
}

protected final void initEQOLD_I(String s) {
if (!s.trim().isEmpty()) {
EQOLD_I = new Double(s);
} else {
EQOLD_I = Double.NaN;
}
}

protected final void initEQOLD_IFLAG(String s) {
if (!s.trim().isEmpty()) {
EQOLD_IFLAG = new Double(s);
} else {
EQOLD_IFLAG = Double.NaN;
}
}

protected final void initEQREAS5(String s) {
if (!s.trim().isEmpty()) {
EQREAS5 = new Double(s);
} else {
EQREAS5 = Double.NaN;
}
}

protected final void initEQREAS6(String s) {
if (!s.trim().isEmpty()) {
EQREAS6 = new Double(s);
} else {
EQREAS6 = Double.NaN;
}
}

protected final void initEQREAS7(String s) {
if (!s.trim().isEmpty()) {
EQREAS7 = new Double(s);
} else {
EQREAS7 = Double.NaN;
}
}

protected final void initEQREAS8(String s) {
if (!s.trim().isEmpty()) {
EQREAS8 = new Double(s);
} else {
EQREAS8 = Double.NaN;
}
}

protected final void initEQREAS9(String s) {
if (!s.trim().isEmpty()) {
EQREAS9 = new Double(s);
} else {
EQREAS9 = Double.NaN;
}
}

protected final void initHEXT1(String s) {
if (!s.trim().isEmpty()) {
HEXT1 = new Double(s);
} else {
HEXT1 = Double.NaN;
}
}

protected final void initHEXT2(String s) {
if (!s.trim().isEmpty()) {
HEXT2 = new Double(s);
} else {
HEXT2 = Double.NaN;
}
}

protected final void initHEXT3(String s) {
if (!s.trim().isEmpty()) {
HEXT3 = new Double(s);
} else {
HEXT3 = Double.NaN;
}
}

protected final void initHEXT4(String s) {
if (!s.trim().isEmpty()) {
HEXT4 = new Double(s);
} else {
HEXT4 = Double.NaN;
}
}

protected final void initHRPDVAGEW2BAND(String s) {
if (!s.trim().isEmpty()) {
HRPDVAGEW2BAND = new Double(s);
} else {
HRPDVAGEW2BAND = Double.NaN;
}
}

protected final void initH_FLAG1(String s) {
if (!s.trim().isEmpty()) {
H_FLAG1 = new Double(s);
} else {
H_FLAG1 = Double.NaN;
}
}

protected final void initH_FLAG2(String s) {
if (!s.trim().isEmpty()) {
H_FLAG2 = new Double(s);
} else {
H_FLAG2 = Double.NaN;
}
}

protected final void initH_FLAG4(String s) {
if (!s.trim().isEmpty()) {
H_FLAG4 = new Double(s);
} else {
H_FLAG4 = Double.NaN;
}
}

protected final void initH_FLAG5(String s) {
if (!s.trim().isEmpty()) {
H_FLAG5 = new Double(s);
} else {
H_FLAG5 = Double.NaN;
}
}

protected final void initMARRSV(String s) {
if (!s.trim().isEmpty()) {
MARRSV = new Double(s);
} else {
MARRSV = Double.NaN;
}
}

protected final void initMARRSV2(String s) {
if (!s.trim().isEmpty()) {
MARRSV2 = new Double(s);
} else {
MARRSV2 = Double.NaN;
}
}

protected final void initMARRSV3(String s) {
if (!s.trim().isEmpty()) {
MARRSV3 = new Double(s);
} else {
MARRSV3 = Double.NaN;
}
}

protected final void initMCHGE(String s) {
if (!s.trim().isEmpty()) {
MCHGE = new Double(s);
} else {
MCHGE = Double.NaN;
}
}

protected final void initMCHGENUM(String s) {
if (!s.trim().isEmpty()) {
MCHGENUM = new Double(s);
} else {
MCHGENUM = Double.NaN;
}
}

protected final void initMENDV10(String s) {
if (!s.trim().isEmpty()) {
MENDV10 = new Double(s);
} else {
MENDV10 = Double.NaN;
}
}

protected final void initMENDV12(String s) {
if (!s.trim().isEmpty()) {
MENDV12 = new Double(s);
} else {
MENDV12 = Double.NaN;
}
}

protected final void initMENDV13(String s) {
if (!s.trim().isEmpty()) {
MENDV13 = new Double(s);
} else {
MENDV13 = Double.NaN;
}
}

protected final void initMENDV14(String s) {
if (!s.trim().isEmpty()) {
MENDV14 = new Double(s);
} else {
MENDV14 = Double.NaN;
}
}

protected final void initMENDV15(String s) {
if (!s.trim().isEmpty()) {
MENDV15 = new Double(s);
} else {
MENDV15 = Double.NaN;
}
}

protected final void initMENDV9(String s) {
if (!s.trim().isEmpty()) {
MENDV9 = new Double(s);
} else {
MENDV9 = Double.NaN;
}
}

protected final void initMENDVB10(String s) {
if (!s.trim().isEmpty()) {
MENDVB10 = new Double(s);
} else {
MENDVB10 = Double.NaN;
}
}

protected final void initMENDVB12(String s) {
if (!s.trim().isEmpty()) {
MENDVB12 = new Double(s);
} else {
MENDVB12 = Double.NaN;
}
}

protected final void initMENDVB13(String s) {
if (!s.trim().isEmpty()) {
MENDVB13 = new Double(s);
} else {
MENDVB13 = Double.NaN;
}
}

protected final void initMENDVB14(String s) {
if (!s.trim().isEmpty()) {
MENDVB14 = new Double(s);
} else {
MENDVB14 = Double.NaN;
}
}

protected final void initMENDVB15(String s) {
if (!s.trim().isEmpty()) {
MENDVB15 = new Double(s);
} else {
MENDVB15 = Double.NaN;
}
}

protected final void initMENDVB9(String s) {
if (!s.trim().isEmpty()) {
MENDVB9 = new Double(s);
} else {
MENDVB9 = Double.NaN;
}
}

protected final void initMENDY10(String s) {
if (!s.trim().isEmpty()) {
MENDY10 = new Double(s);
} else {
MENDY10 = Double.NaN;
}
}

protected final void initMENDY12(String s) {
if (!s.trim().isEmpty()) {
MENDY12 = new Double(s);
} else {
MENDY12 = Double.NaN;
}
}

protected final void initMENDY13(String s) {
if (!s.trim().isEmpty()) {
MENDY13 = new Double(s);
} else {
MENDY13 = Double.NaN;
}
}

protected final void initMENDY14(String s) {
if (!s.trim().isEmpty()) {
MENDY14 = new Double(s);
} else {
MENDY14 = Double.NaN;
}
}

protected final void initMENDY15(String s) {
if (!s.trim().isEmpty()) {
MENDY15 = new Double(s);
} else {
MENDY15 = Double.NaN;
}
}

protected final void initMENDY9(String s) {
if (!s.trim().isEmpty()) {
MENDY9 = new Double(s);
} else {
MENDY9 = Double.NaN;
}
}

protected final void initMEND___W2(String s) {
if (!s.trim().isEmpty()) {
MEND___W2 = new Double(s);
} else {
MEND___W2 = Double.NaN;
}
}

protected final void initMEXTN(String s) {
if (!s.trim().isEmpty()) {
MEXTN = new Double(s);
} else {
MEXTN = Double.NaN;
}
}

protected final void initMEXTRS1(String s) {
if (!s.trim().isEmpty()) {
MEXTRS1 = new Double(s);
} else {
MEXTRS1 = Double.NaN;
}
}

protected final void initMEXTRS2(String s) {
if (!s.trim().isEmpty()) {
MEXTRS2 = new Double(s);
} else {
MEXTRS2 = Double.NaN;
}
}

protected final void initMEXTRS3(String s) {
if (!s.trim().isEmpty()) {
MEXTRS3 = new Double(s);
} else {
MEXTRS3 = Double.NaN;
}
}

protected final void initMEXTRS4(String s) {
if (!s.trim().isEmpty()) {
MEXTRS4 = new Double(s);
} else {
MEXTRS4 = Double.NaN;
}
}

protected final void initMEXTRS5(String s) {
if (!s.trim().isEmpty()) {
MEXTRS5 = new Double(s);
} else {
MEXTRS5 = Double.NaN;
}
}

protected final void initMEXTRS6(String s) {
if (!s.trim().isEmpty()) {
MEXTRS6 = new Double(s);
} else {
MEXTRS6 = Double.NaN;
}
}

protected final void initMEXTRS7(String s) {
if (!s.trim().isEmpty()) {
MEXTRS7 = new Double(s);
} else {
MEXTRS7 = Double.NaN;
}
}

protected final void initMEXTRS8(String s) {
if (!s.trim().isEmpty()) {
MEXTRS8 = new Double(s);
} else {
MEXTRS8 = Double.NaN;
}
}

protected final void initMEXTRS9(String s) {
if (!s.trim().isEmpty()) {
MEXTRS9 = new Double(s);
} else {
MEXTRS9 = Double.NaN;
}
}

protected final void initMINC10(String s) {
if (!s.trim().isEmpty()) {
MINC10 = new Double(s);
} else {
MINC10 = Double.NaN;
}
}

protected final void initMINC13(String s) {
if (!s.trim().isEmpty()) {
MINC13 = new Double(s);
} else {
MINC13 = Double.NaN;
}
}

protected final void initMINC14(String s) {
if (!s.trim().isEmpty()) {
MINC14 = new Double(s);
} else {
MINC14 = Double.NaN;
}
}

protected final void initMINC15(String s) {
if (!s.trim().isEmpty()) {
MINC15 = new Double(s);
} else {
MINC15 = Double.NaN;
}
}

protected final void initMNUMBN(String s) {
if (!s.trim().isEmpty()) {
MNUMBN = new Double(s);
} else {
MNUMBN = Double.NaN;
}
}

protected final void initMNUMBN_I(String s) {
if (!s.trim().isEmpty()) {
MNUMBN_I = new Double(s);
} else {
MNUMBN_I = Double.NaN;
}
}

protected final void initMNUMBN_IFLAG(String s) {
if (!s.trim().isEmpty()) {
MNUMBN_IFLAG = new Double(s);
} else {
MNUMBN_IFLAG = Double.NaN;
}
}

protected final void initMNUMBO(String s) {
if (!s.trim().isEmpty()) {
MNUMBO = new Double(s);
} else {
MNUMBO = Double.NaN;
}
}

protected final void initMNUMBO_I(String s) {
if (!s.trim().isEmpty()) {
MNUMBO_I = new Double(s);
} else {
MNUMBO_I = Double.NaN;
}
}

protected final void initMNUMBO_IFLAG(String s) {
if (!s.trim().isEmpty()) {
MNUMBO_IFLAG = new Double(s);
} else {
MNUMBO_IFLAG = Double.NaN;
}
}

protected final void initMORTID(String s) {
if (!s.trim().isEmpty()) {
MORTID = new Double(s);
} else {
MORTID = Double.NaN;
}
}

protected final void initMORTID2(String s) {
if (!s.trim().isEmpty()) {
MORTID2 = new Double(s);
} else {
MORTID2 = Double.NaN;
}
}

protected final void initMORTID3(String s) {
if (!s.trim().isEmpty()) {
MORTID3 = new Double(s);
} else {
MORTID3 = Double.NaN;
}
}

protected final void initMREAS14(String s) {
if (!s.trim().isEmpty()) {
MREAS14 = new Double(s);
} else {
MREAS14 = Double.NaN;
}
}

protected final void initMREAS15(String s) {
if (!s.trim().isEmpty()) {
MREAS15 = new Double(s);
} else {
MREAS15 = Double.NaN;
}
}

protected final void initMREAS24(String s) {
if (!s.trim().isEmpty()) {
MREAS24 = new Double(s);
} else {
MREAS24 = Double.NaN;
}
}

protected final void initMVALB2_I(String s) {
if (!s.trim().isEmpty()) {
MVALB2_I = new Double(s);
} else {
MVALB2_I = Double.NaN;
}
}

protected final void initMVALB2_IFLAG(String s) {
if (!s.trim().isEmpty()) {
MVALB2_IFLAG = new Double(s);
} else {
MVALB2_IFLAG = Double.NaN;
}
}

protected final void initMW1CHK1(String s) {
if (!s.trim().isEmpty()) {
MW1CHK1 = new Double(s);
} else {
MW1CHK1 = Double.NaN;
}
}

protected final void initMW1CHK2(String s) {
if (!s.trim().isEmpty()) {
MW1CHK2 = new Double(s);
} else {
MW1CHK2 = Double.NaN;
}
}

protected final void initMW1CHK3(String s) {
if (!s.trim().isEmpty()) {
MW1CHK3 = new Double(s);
} else {
MW1CHK3 = Double.NaN;
}
}

protected final void initMYIFCH(String s) {
if (!s.trim().isEmpty()) {
MYIFCH = new Double(s);
} else {
MYIFCH = Double.NaN;
}
}

protected final void initMYIFCH2(String s) {
if (!s.trim().isEmpty()) {
MYIFCH2 = new Double(s);
} else {
MYIFCH2 = Double.NaN;
}
}

protected final void initMYIFCH3(String s) {
if (!s.trim().isEmpty()) {
MYIFCH3 = new Double(s);
} else {
MYIFCH3 = Double.NaN;
}
}

protected final void initNOUNITS(String s) {
if (!s.trim().isEmpty()) {
NOUNITS = new Double(s);
} else {
NOUNITS = Double.NaN;
}
}

protected final void initNUMDEPCH_HH(String s) {
if (!s.trim().isEmpty()) {
NUMDEPCH_HH = new Double(s);
} else {
NUMDEPCH_HH = Double.NaN;
}
}

protected final void initNUMNDEP(String s) {
if (!s.trim().isEmpty()) {
NUMNDEP = new Double(s);
} else {
NUMNDEP = Double.NaN;
}
}

protected final void initVCADD(String s) {
if (!s.trim().isEmpty()) {
VCADD = new Double(s);
} else {
VCADD = Double.NaN;
}
}

protected final void initVCADDN(String s) {
if (!s.trim().isEmpty()) {
VCADDN = new Double(s);
} else {
VCADDN = Double.NaN;
}
}

protected final void initVPERS_I(String s) {
if (!s.trim().isEmpty()) {
VPERS_I = new Double(s);
} else {
VPERS_I = Double.NaN;
}
}

protected final void initVPERS_IFLAG(String s) {
if (!s.trim().isEmpty()) {
VPERS_IFLAG = new Double(s);
} else {
VPERS_IFLAG = Double.NaN;
}
}

protected final void initXS_CALWGT(String s) {
if (!s.trim().isEmpty()) {
XS_CALWGT = new Double(s);
} else {
XS_CALWGT = Double.NaN;
}
}

public double getBUYLGDST_SUM() {
return BUYLGDST_SUM;
}

public Integer getCASEW2() {
return CASEW2;
}

public double getDVBLTDEBT() {
return DVBLTDEBT;
}

public double getDVBLTVAL() {
return DVBLTVAL;
}

public double getDVNWFLN_SUM() {
return DVNWFLN_SUM;
}

public double getDVNWILN_SUM() {
return DVNWILN_SUM;
}

public double getEQNEW() {
return EQNEW;
}

public double getEQNEW_I() {
return EQNEW_I;
}

public double getEQNEW_IFLAG() {
return EQNEW_IFLAG;
}

public double getEQOLD() {
return EQOLD;
}

public double getEQOLD_I() {
return EQOLD_I;
}

public double getEQOLD_IFLAG() {
return EQOLD_IFLAG;
}

public double getEQREAS5() {
return EQREAS5;
}

public double getEQREAS6() {
return EQREAS6;
}

public double getEQREAS7() {
return EQREAS7;
}

public double getEQREAS8() {
return EQREAS8;
}

public double getEQREAS9() {
return EQREAS9;
}

public double getHEXT1() {
return HEXT1;
}

public double getHEXT2() {
return HEXT2;
}

public double getHEXT3() {
return HEXT3;
}

public double getHEXT4() {
return HEXT4;
}

public double getHRPDVAGEW2BAND() {
return HRPDVAGEW2BAND;
}

public double getH_FLAG1() {
return H_FLAG1;
}

public double getH_FLAG2() {
return H_FLAG2;
}

public double getH_FLAG4() {
return H_FLAG4;
}

public double getH_FLAG5() {
return H_FLAG5;
}

public double getMARRSV() {
return MARRSV;
}

public double getMARRSV2() {
return MARRSV2;
}

public double getMARRSV3() {
return MARRSV3;
}

public double getMCHGE() {
return MCHGE;
}

public double getMCHGENUM() {
return MCHGENUM;
}

public double getMENDV10() {
return MENDV10;
}

public double getMENDV12() {
return MENDV12;
}

public double getMENDV13() {
return MENDV13;
}

public double getMENDV14() {
return MENDV14;
}

public double getMENDV15() {
return MENDV15;
}

public double getMENDV9() {
return MENDV9;
}

public double getMENDVB10() {
return MENDVB10;
}

public double getMENDVB12() {
return MENDVB12;
}

public double getMENDVB13() {
return MENDVB13;
}

public double getMENDVB14() {
return MENDVB14;
}

public double getMENDVB15() {
return MENDVB15;
}

public double getMENDVB9() {
return MENDVB9;
}

public double getMENDY10() {
return MENDY10;
}

public double getMENDY12() {
return MENDY12;
}

public double getMENDY13() {
return MENDY13;
}

public double getMENDY14() {
return MENDY14;
}

public double getMENDY15() {
return MENDY15;
}

public double getMENDY9() {
return MENDY9;
}

public double getMEND___W2() {
return MEND___W2;
}

public double getMEXTN() {
return MEXTN;
}

public double getMEXTRS1() {
return MEXTRS1;
}

public double getMEXTRS2() {
return MEXTRS2;
}

public double getMEXTRS3() {
return MEXTRS3;
}

public double getMEXTRS4() {
return MEXTRS4;
}

public double getMEXTRS5() {
return MEXTRS5;
}

public double getMEXTRS6() {
return MEXTRS6;
}

public double getMEXTRS7() {
return MEXTRS7;
}

public double getMEXTRS8() {
return MEXTRS8;
}

public double getMEXTRS9() {
return MEXTRS9;
}

public double getMINC10() {
return MINC10;
}

public double getMINC13() {
return MINC13;
}

public double getMINC14() {
return MINC14;
}

public double getMINC15() {
return MINC15;
}

public double getMNUMBN() {
return MNUMBN;
}

public double getMNUMBN_I() {
return MNUMBN_I;
}

public double getMNUMBN_IFLAG() {
return MNUMBN_IFLAG;
}

public double getMNUMBO() {
return MNUMBO;
}

public double getMNUMBO_I() {
return MNUMBO_I;
}

public double getMNUMBO_IFLAG() {
return MNUMBO_IFLAG;
}

public double getMORTID() {
return MORTID;
}

public double getMORTID2() {
return MORTID2;
}

public double getMORTID3() {
return MORTID3;
}

public double getMREAS14() {
return MREAS14;
}

public double getMREAS15() {
return MREAS15;
}

public double getMREAS24() {
return MREAS24;
}

public double getMVALB2_I() {
return MVALB2_I;
}

public double getMVALB2_IFLAG() {
return MVALB2_IFLAG;
}

public double getMW1CHK1() {
return MW1CHK1;
}

public double getMW1CHK2() {
return MW1CHK2;
}

public double getMW1CHK3() {
return MW1CHK3;
}

public double getMYIFCH() {
return MYIFCH;
}

public double getMYIFCH2() {
return MYIFCH2;
}

public double getMYIFCH3() {
return MYIFCH3;
}

public double getNOUNITS() {
return NOUNITS;
}

public double getNUMDEPCH_HH() {
return NUMDEPCH_HH;
}

public double getNUMNDEP() {
return NUMNDEP;
}

public double getVCADD() {
return VCADD;
}

public double getVCADDN() {
return VCADDN;
}

public double getVPERS_I() {
return VPERS_I;
}

public double getVPERS_IFLAG() {
return VPERS_IFLAG;
}

public double getXS_CALWGT() {
return XS_CALWGT;
}

public WIGB_Wave2_HHOLD_Record(String line) {
s = line.split("\t");
initH_FLAG1(s[0]);
initH_FLAG2(s[1]);
initH_FLAG4(s[2]);
initH_FLAG5(s[3]);
initXS_CALWGT(s[4]);
initHOUT(s[5]);
initACCOM(s[6]);
initACCOTH(s[7]);
initDVVESTV2_I(s[8]);
initDVVESTV2_IFLAG(s[9]);
initDVVESTV3_I(s[10]);
initDVVESTV3_IFLAG(s[11]);
initDVVESTV_I(s[12]);
initDVVESTV_IFLAG(s[13]);
initDVVOVAL_I(s[14]);
initDVVOVAL_IFLAG(s[15]);
initDVVPERV_I(s[16]);
initDVVPERV_IFLAG(s[17]);
initEINTPAY(s[18]);
initEINTRAT(s[19]);
initEINTRAT_I(s[20]);
initEINTRAT_IFLAG(s[21]);
initEOTHIRR(s[22]);
initEOTHIVA(s[23]);
initEOTHIVB(s[24]);
initEOTHREG(s[25]);
initEOTHRVA(s[26]);
initEOTHRVB(s[27]);
initEPRPER(s[28]);
initEPRVAL(s[29]);
initEPRVPAY(s[30]);
initEQFILTER(s[31]);
initEQNEW(s[32]);
initEQNEW_I(s[33]);
initEQNEW_IFLAG(s[34]);
initEQOLD(s[35]);
initEQOLD_I(s[36]);
initEQOLD_IFLAG(s[37]);
initEQREAS1(s[38]);
initEQREAS2(s[39]);
initEQREAS3(s[40]);
initEQREAS4(s[41]);
initEQREAS5(s[42]);
initEQREAS6(s[43]);
initEQREAS7(s[44]);
initEQREAS8(s[45]);
initEQREAS9(s[46]);
initEQREL(s[47]);
initEQREL_I(s[48]);
initEQREL_IFLAG(s[49]);
initEQTYPE(s[50]);
initEQTYPE_I(s[51]);
initEQTYPE_IFLAG(s[52]);
initEQVALB(s[53]);
initEQVAL(s[54]);
initEQVAL_I(s[55]);
initEQVAL_IFLAG(s[56]);
initEQWHEN(s[57]);
initEQYES(s[58]);
initEQYES_I(s[59]);
initEQYES_IFLAG(s[60]);
initERECMB(s[61]);
initERECM(s[62]);
initERECTAX(s[63]);
initERENTAM(s[64]);
initERENTB(s[65]);
initERVPRP(s[66]);
initERVPRP_I(s[67]);
initERVPRP_IFLAG(s[68]);
initERVRECB(s[69]);
initERVREC(s[70]);
initERVREG(s[71]);
initERVRENT(s[72]);
initERVSUMB(s[73]);
initERVSUM(s[74]);
initERVTAX(s[75]);
initFLTTYP(s[76]);
initFURN(s[77]);
initGCOLLEC(s[78]);
initGCOLLEC_I(s[79]);
initGCOLLEC_IFLAG(s[80]);
initGCOLLVB(s[81]);
initGCOLLV(s[82]);
initGCOLLV_I(s[83]);
initGCOLLV_IFLAG(s[84]);
initGCONTVB(s[85]);
initGCONTVB_I(s[86]);
initGCONTVB_IFLAG(s[87]);
initGCONTVLS2(s[88]);
initGCPREAM(s[89]);
initHAGEB(s[90]);
initHAGEYR(s[91]);
initHBFROM(s[92]);
initHBUYSE(s[93]);
initHBUYYR(s[94]);
initHEXT1(s[95]);
initHEXT2(s[96]);
initHEXT3(s[97]);
initHEXT4(s[98]);
initHHOSCH(s[99]);
initHHOWN(s[100]);
initHMORTG(s[101]);
initHPHYSW(s[102]);
initHPRICEB(s[103]);
initHPRICE(s[104]);
initHRTBEV(s[105]);
initHSETYPE(s[106]);
initHSHAREP(s[107]);
initHSHAREP_I(s[108]);
initHSHAREP_IFLAG(s[109]);
initHSHARE(s[110]);
initHSHARE_I(s[111]);
initHSHARE_IFLAG(s[112]);
initHVALB(s[113]);
initHVALRS1(s[114]);
initHVALRS2(s[115]);
initHVALRS3(s[116]);
initHVALRS4(s[117]);
initHVALRS5(s[118]);
initHVALUE(s[119]);
initHVALUE_I(s[120]);
initHVALUE_IFLAG(s[121]);
initLLORD(s[122]);
initMALL2(s[123]);
initMALL2_I(s[124]);
initMALL2_IFLAG(s[125]);
initMALL3(s[126]);
initMALL3_I(s[127]);
initMALL3_IFLAG(s[128]);
initMALLTY2(s[129]);
initMALLTY2_I(s[130]);
initMALLTY2_IFLAG(s[131]);
initMALLTY3(s[132]);
initMALLTY3_I(s[133]);
initMALLTY3_IFLAG(s[134]);
initMALLTY(s[135]);
initMALLTY_I(s[136]);
initMALLTY_IFLAG(s[137]);
initMALL(s[138]);
initMALL_I(s[139]);
initMALL_IFLAG(s[140]);
initMARRS2(s[141]);
initMARRS3(s[142]);
initMARRSV2(s[143]);
initMARRSV3(s[144]);
initMARRSV(s[145]);
initMARRS(s[146]);
initMCHGENUM(s[147]);
initMCHGE(s[148]);
initMDIFFPY(s[149]);
initMENDNUM2(s[150]);
initMENDNUM2_I(s[151]);
initMENDNUM2_IFLAG(s[152]);
initMENDNUM3(s[153]);
initMENDNUM(s[154]);
initMENDNUM_I(s[155]);
initMENDNUM_IFLAG(s[156]);
initMENDV10(s[157]);
initMENDV11(s[158]);
initMENDV12(s[159]);
initMENDV13(s[160]);
initMENDV14(s[161]);
initMENDV15(s[162]);
initMENDV2(s[163]);
initMENDV2_I(s[164]);
initMENDV2_IFLAG(s[165]);
initMENDV3(s[166]);
initMENDV3_I(s[167]);
initMENDV3_IFLAG(s[168]);
initMENDV4(s[169]);
initMENDV4_I(s[170]);
initMENDV4_IFLAG(s[171]);
initMENDV5(s[172]);
initMENDV6(s[173]);
initMENDV6_I(s[174]);
initMENDV6_IFLAG(s[175]);
initMENDV7(s[176]);
initMENDV8(s[177]);
initMENDV9(s[178]);
initMENDVB10(s[179]);
initMENDVB11(s[180]);
initMENDVB12(s[181]);
initMENDVB13(s[182]);
initMENDVB14(s[183]);
initMENDVB15(s[184]);
initMENDVB2(s[185]);
initMENDVB3(s[186]);
initMENDVB4(s[187]);
initMENDVB5(s[188]);
initMENDVB6(s[189]);
initMENDVB7(s[190]);
initMENDVB8(s[191]);
initMENDVB9(s[192]);
initMENDVB(s[193]);
initMENDV(s[194]);
initMENDV_I(s[195]);
initMENDV_IFLAG(s[196]);
initMEND___W2(s[197]);
initMENDW2_I(s[198]);
initMENDW2_IFLAG(s[199]);
initMENDW3(s[200]);
initMENDW3_I(s[201]);
initMENDW3_IFLAG(s[202]);
initMENDW(s[203]);
initMENDW_I(s[204]);
initMENDW_IFLAG(s[205]);
initMENDX2(s[206]);
initMENDX3(s[207]);
initMENDX(s[208]);
initMENDY10(s[209]);
initMENDY11(s[210]);
initMENDY12(s[211]);
initMENDY13(s[212]);
initMENDY14(s[213]);
initMENDY15(s[214]);
initMENDY2(s[215]);
initMENDY3(s[216]);
initMENDY4(s[217]);
initMENDY5(s[218]);
initMENDY6(s[219]);
initMENDY7(s[220]);
initMENDY8(s[221]);
initMENDY9(s[222]);
initMENDY(s[223]);
initMEXTN(s[224]);
initMEXTRS1(s[225]);
initMEXTRS2(s[226]);
initMEXTRS3(s[227]);
initMEXTRS4(s[228]);
initMEXTRS5(s[229]);
initMEXTRS6(s[230]);
initMEXTRS7(s[231]);
initMEXTRS8(s[232]);
initMEXTRS9(s[233]);
initMHOWPY2(s[234]);
initMHOWPY3(s[235]);
initMHOWPY(s[236]);
initMINC10(s[237]);
initMINC11(s[238]);
initMINC12(s[239]);
initMINC13(s[240]);
initMINC14(s[241]);
initMINC15(s[242]);
initMINC1(s[243]);
initMINC2(s[244]);
initMINC3(s[245]);
initMINC4(s[246]);
initMINC5(s[247]);
initMINC6(s[248]);
initMINC7(s[249]);
initMINC8(s[250]);
initMINC9(s[251]);
initMJNAME01(s[252]);
initMJNAME02(s[253]);
initMJNAME03(s[254]);
initMJNAME04(s[255]);
initMJNAME18(s[256]);
initMJNAME19(s[257]);
initMJNAME20(s[258]);
initMJNAME35(s[259]);
initMJNAME36(s[260]);
initMNAME2(s[261]);
initMNAME3(s[262]);
initMNAME(s[263]);
initMNEG2(s[264]);
initMNEG2_I(s[265]);
initMNEG2_IFLAG(s[266]);
initMNEG3(s[267]);
initMNEGB2(s[268]);
initMNEGB3(s[269]);
initMNEGB(s[270]);
initMNEG(s[271]);
initMNEG_I(s[272]);
initMNEG_IFLAG(s[273]);
initMNUMBN(s[274]);
initMNUMBN_I(s[275]);
initMNUMBN_IFLAG(s[276]);
initMNUMBO(s[277]);
initMNUMBO_I(s[278]);
initMNUMBO_IFLAG(s[279]);
initMNUMB(s[280]);
initMOARR_SUM(s[281]);
initMONAME2(s[282]);
initMONAME3(s[283]);
initMONAME(s[284]);
initMORTID2(s[285]);
initMORTID3(s[286]);
initMORTID(s[287]);
initMPAYB2(s[288]);
initMPAYB3(s[289]);
initMPAYB(s[290]);
initMPAYM2(s[291]);
initMPAYM3(s[292]);
initMPAYM(s[293]);
initMPP2(s[294]);
initMPP3(s[295]);
initMPP(s[296]);
initMREAS01(s[297]);
initMREAS02(s[298]);
initMREAS03(s[299]);
initMREAS04(s[300]);
initMREAS05(s[301]);
initMREAS06(s[302]);
initMREAS07(s[303]);
initMREAS08(s[304]);
initMREAS09(s[305]);
initMREAS11(s[306]);
initMREAS12(s[307]);
initMREAS13(s[308]);
initMREAS14(s[309]);
initMREAS15(s[310]);
initMREAS21(s[311]);
initMREAS22(s[312]);
initMREAS23(s[313]);
initMREAS24(s[314]);
initMTYPE2(s[315]);
initMTYPE2_I(s[316]);
initMTYPE2_IFLAG(s[317]);
initMTYPE3(s[318]);
initMTYPE3_I(s[319]);
initMTYPE3_IFLAG(s[320]);
initMTYPE(s[321]);
initMTYPE_I(s[322]);
initMTYPE_IFLAG(s[323]);
initMVAL2(s[324]);
initMVAL2_I(s[325]);
initMVAL2_IFLAG(s[326]);
initMVAL3(s[327]);
initMVAL3_I(s[328]);
initMVAL3_IFLAG(s[329]);
initMVALB2(s[330]);
initMVALB2_I(s[331]);
initMVALB2_IFLAG(s[332]);
initMVALB3(s[333]);
initMVALB(s[334]);
initMVAL(s[335]);
initMVAL_I(s[336]);
initMVAL_IFLAG(s[337]);
initMW1CHK1(s[338]);
initMW1CHK2(s[339]);
initMW1CHK3(s[340]);
initMYIFCH2(s[341]);
initMYIFCH3(s[342]);
initMYIFCH(s[343]);
initMYLFT2(s[344]);
initMYLFT3(s[345]);
initMYLFT(s[346]);
initNVESTV(s[347]);
initOFINAL(s[348]);
initOTHMORT(s[349]);
initTEN1(s[350]);
initTEN1_I(s[351]);
initTEN1_IFLAG(s[352]);
initTIED(s[353]);
initVCADDN(s[354]);
initVCADD(s[355]);
initVCARN(s[356]);
initVCARN_I(s[357]);
initVCARN_IFLAG(s[358]);
initVESTV2(s[359]);
initVESTV2_I(s[360]);
initVESTV2_IFLAG(s[361]);
initVESTV(s[362]);
initVESTV_I(s[363]);
initVESTV_IFLAG(s[364]);
initVESVB2(s[365]);
initVESVB(s[366]);
initVOTHT(s[367]);
initVOTHT_I(s[368]);
initVOTHT_IFLAG(s[369]);
initVOTYP1(s[370]);
initVOTYP1_IFLAG(s[371]);
initVOTYP2(s[372]);
initVOTYP2_IFLAG(s[373]);
initVOTYP3(s[374]);
initVOTYP3_IFLAG(s[375]);
initVOTYP4(s[376]);
initVOTYP4_IFLAG(s[377]);
initVOTYP5(s[378]);
initVOTYP5_IFLAG(s[379]);
initVOVAL(s[380]);
initVOVAL_I(s[381]);
initVOVAL_IFLAG(s[382]);
initVOVLB(s[383]);
initVOVLB_I(s[384]);
initVOVLB_IFLAG(s[385]);
initVPERS(s[386]);
initVPERS_I(s[387]);
initVPERS_IFLAG(s[388]);
initVPERV(s[389]);
initVPERV_I(s[390]);
initVPERV_IFLAG(s[391]);
initVTYPE2(s[392]);
initVTYPE2_I(s[393]);
initVTYPE2_IFLAG(s[394]);
initVTYPE(s[395]);
initVTYPE_I(s[396]);
initVTYPE_IFLAG(s[397]);
initALLENDW(s[398]);
initALLGD(s[399]);
initBUYLGDST_SUM(s[400]);
initDVBLDDEBT(s[401]);
initDVBLDVAL(s[402]);
initDVBLTDEBT(s[403]);
initDVBLTVAL(s[404]);
initDVCACRVAL_SUM(s[405]);
initDVCACTV_SUM(s[406]);
initDVCAODVAL_SUM(s[407]);
initDVCASVV_SUM(s[408]);
initDVCAVAL_SUM(s[409]);
initDVCISAV_SUM(s[410]);
initDVDBRWEALTHVAL_SUM(s[411]);
initDVEQHIP(s[412]);
initDVEQRELVAL(s[413]);
initDVEQRUPM(s[414]);
initDVFBONDV_SUM(s[415]);
initDVFCOLLV_SUM(s[416]);
initDVFESHARES_SUM(s[417]);
initDVFFASSETS_SUM(s[418]);
initDVFGLTFOV_SUM(s[419]);
initDVFGLTUKV_SUM(s[420]);
initDVFINFLV_SUM(s[421]);
initDVFINFVAL_SUM(s[422]);
initDVFINFV_SUM(s[423]);
initDVFINVOTV_SUM(s[424]);
initDVFNSVAL_SUM(s[425]);
initDVFSHOSV_SUM(s[426]);
initDVFSHUKV_SUM(s[427]);
initDVGCOLLV(s[428]);
initDVHORP(s[429]);
initDVHSEDEBT(s[430]);
initDVHSEVAL(s[431]);
initDVHVALUE(s[432]);
initDVIISAV_SUM(s[433]);
initDVINSV_SUM(s[434]);
initDVISAVAL_SUM(s[435]);
initDVKISAV_SUM(s[436]);
initDVLOSDEBT(s[437]);
initDVLOSVAL(s[438]);
initDVLUKDEBT(s[439]);
initDVLUKVAL(s[440]);
initDVNWFLN_SUM(s[441]);
initDVNWILN_SUM(s[442]);
initDVOPRDEBT(s[443]);
initDVOPRVAL(s[444]);
initDVPAVCUV_SUM(s[445]);
initDVPFCURVAL_SUM(s[446]);
initDVPFDDV_SUM(s[447]);
initDVPINPVAL_SUM(s[448]);
initDVPPVAL_SUM(s[449]);
initDVPRIRNT(s[450]);
initDVPROPERTY(s[451]);
initDVSAVAL_SUM(s[452]);
initDVSPEN_SUM(s[453]);
initDVTOTCARVAL(s[454]);
initDVTOTMOTBVAL(s[455]);
initDVTOTOTHVEHVAL(s[456]);
initDVTOTPERNPVAL(s[457]);
initDVTOTVANVAL(s[458]);
initDVTOTVEHVAL(s[459]);
initDVVALDBT_SUM(s[460]);
initDVVALDCOS_SUM(s[461]);
initHFINL_SUM(s[462]);
initHFINW_EXCENDW_SUM(s[463]);
initHFINWNT_SUM(s[464]);
initHFINW_SUM(s[465]);
initHOUSGDST_SUM(s[466]);
initHPARR_SUM(s[467]);
initHPROPW(s[468]);
initLNARR_SUM(s[469]);
initT_FLNS_SUM(s[470]);
initT_LNS_SUM(s[471]);
initT_SLNS_SUM(s[472]);
initTOTBILLARR_SUM(s[473]);
initTOTCC_SUM(s[474]);
initTOTHP_SUM(s[475]);
initTOTLOS_SUM(s[476]);
initTOTMNEG(s[477]);
initTOTMORT(s[478]);
initTOTMO_SUM(s[479]);
initTOTMVAL(s[480]);
initTOTPEN_SUM(s[481]);
initTOTSC_SUM(s[482]);
initTOTWLTH(s[483]);
initDVHRPNUM(s[484]);
initDVHSIZE(s[485]);
initHHOLDTYPE(s[486]);
initHRPDVAGE9(s[487]);
initHRPDVILO3A(s[488]);
initHRPDVMRDF(s[489]);
initHRPEDATTN1(s[490]);
initHRPEDATTN2(s[491]);
initHRPEDATTN3(s[492]);
initHRPEDLEVEL(s[493]);
initHRPEMPSTAT2(s[494]);
initHRPIOUT1(s[495]);
initHRPNSSEC3(s[496]);
initHRPPARTIOUT1(s[497]);
initHRPPART(s[498]);
initHRPSEX(s[499]);
initNBABY(s[500]);
initNC1015(s[501]);
initNC1618(s[502]);
initNC5TO9(s[503]);
initNCHILD(s[504]);
initNCU16(s[505]);
initNCUND5(s[506]);
initNDEPC(s[507]);
initNNDEPC(s[508]);
initNOUNITS(s[509]);
initNUMADULT(s[510]);
initNUMCH18(s[511]);
initNUMCHILD(s[512]);
initNUMCIVPTR(s[513]);
initNUMCPART(s[514]);
initNUMDEPCH_HH(s[515]);
initNUMHHLDR(s[516]);
initNUMJOB(s[517]);
initNUMMPART(s[518]);
initNUMNDEP(s[519]);
initNUMSSEX(s[520]);
initVESTV3_IFLAG(s[521]);
initVESVB3(s[522]);
initVESTV3(s[523]);
initVESTV3_I(s[524]);
initHRPDVAGE15(s[525]);
initHBEDRM(s[526]);
initVOTYP1_I(s[527]);
initVOTYP2_I(s[528]);
initVOTYP3_I(s[529]);
initVOTYP4_I(s[530]);
initVOTYP5_I(s[531]);
initCASEW2(s[532]);
initCASEW1(s[533]);
initHRPDVAGEW2BAND(s[534]);
initGOR(s[535]);
initYEAR(s[536]);
initMONTH(s[537]);
}
}
